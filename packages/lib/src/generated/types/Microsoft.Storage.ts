/**
 * Type definitions for Microsoft.Storage resources.
 *
 * **API Version**: 2025-01-01
 * **Generated**: 2025-10-04T02:15:31.643Z
 * **Source**: Microsoft.Storage.json
 *
 * @remarks
 * This file is auto-generated. Do not edit manually.
 * Generated by Felix (Schema & Validation Engineer)
 *
 * @packageDocumentation
 */

/**
 * AccessPolicy definition.
 */
export interface AccessPolicy {
  /**
   * Expiry time of the access policy
   */
  readonly expiryTime?: string;
  /**
   * List of abbreviated permissions.
   */
  readonly permission?: string;
  /**
   * Start time of the access policy
   */
  readonly startTime?: string;
}

/**
 * AccountImmutabilityPolicyProps definition.
 */
export interface AccountImmutabilityPolicyProps {
  /**
   * This property can only be changed for disabled and unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted.
   */
  readonly allowProtectedAppendWrites?: boolean | any;
  /**
   * The immutability period for the blobs in the container since the policy creation, in days.
   */
  readonly immutabilityPeriodSinceCreationInDays?: number | any;
  /**
   * The ImmutabilityPolicy state defines the mode of the policy. Disabled state disables the policy, Unlocked state allows increase and decrease of immutability retention time and also allows toggling allowProtectedAppendWrites property, Locked state only allows the increase of the immutability retention time. A policy can only be created in a Disabled or Unlocked state and can be toggled between the two states. Only a policy in an Unlocked state can transition to a Locked state which cannot be reverted.
   */
  readonly state?: 'Unlocked' | 'Locked' | 'Disabled' | any;
}

/**
 * ActiveDirectoryProps definition.
 */
export interface ActiveDirectoryProps {
  /**
   * Specifies the Active Directory account type for Azure Storage. If directoryServiceOptions is set to AD (AD DS authentication), this property is optional. If provided, samAccountName should also be provided. For directoryServiceOptions AADDS (Entra DS authentication) or AADKERB (Entra authentication), this property can be omitted.
   */
  readonly accountType?: 'User' | 'Computer' | any;
  /**
   * Specifies the security identifier (SID) for Azure Storage. If directoryServiceOptions is set to AD (AD DS authentication), this property is required. Otherwise, it can be omitted.
   */
  readonly azureStorageSid?: string;
  /**
   * Specifies the domain GUID. If directoryServiceOptions is set to AD (AD DS authentication), this property is required. If directoryServiceOptions is set to AADDS (Entra DS authentication), this property can be omitted. If directoryServiceOptions is set to AADKERB (Entra authentication), this property is optional; it is needed to support configuration of directory- and file-level permissions via Windows File Explorer, but is not required for authentication.
   */
  readonly domainGuid?: string;
  /**
   * Specifies the primary domain that the AD DNS server is authoritative for. This property is required if directoryServiceOptions is set to AD (AD DS authentication). If directoryServiceOptions is set to AADDS (Entra DS authentication), providing this property is optional, as it will be inferred automatically if omitted. If directoryServiceOptions is set to AADKERB (Entra authentication), this property is optional; it is needed to support configuration of directory- and file-level permissions via Windows File Explorer, but is not required for authentication.
   */
  readonly domainName?: string;
  /**
   * Specifies the security identifier (SID) of the AD domain. If directoryServiceOptions is set to AD (AD DS authentication), this property is required. Otherwise, it can be omitted.
   */
  readonly domainSid?: string;
  /**
   * Specifies the Active Directory forest to get. If directoryServiceOptions is set to AD (AD DS authentication), this property is required. Otherwise, it can be omitted.
   */
  readonly forestName?: string;
  /**
   * Specifies the NetBIOS domain name. If directoryServiceOptions is set to AD (AD DS authentication), this property is required. Otherwise, it can be omitted.
   */
  readonly netBiosDomainName?: string;
  /**
   * Specifies the Active Directory SAMAccountName for Azure Storage. If directoryServiceOptions is set to AD (AD DS authentication), this property is optional. If provided, accountType should also be provided. For directoryServiceOptions AADDS (Entra DS authentication) or AADKERB (Entra authentication), this property can be omitted.
   */
  readonly samAccountName?: string;
}

/**
 * AzureFilesIdentityBasedAuthentication definition.
 */
export interface AzureFilesIdentityBasedAuthentication {
  /**
   * Additional information about the directory service. Required if directoryServiceOptions is AD (AD DS authentication). Optional for directoryServiceOptions AADDS (Entra DS authentication) and AADKERB (Entra authentication).
   */
  readonly activeDirectoryProperties?: ActiveDirectoryProps | any;
  /**
   * Default share permission for users using Kerberos authentication if RBAC role is not assigned.
   */
  readonly defaultSharePermission?: 'None' | 'StorageFileDataSmbShareReader' | 'StorageFileDataSmbShareContributor' | 'StorageFileDataSmbShareElevatedContributor' | any;
  /**
   * Indicates the directory service used. Note that this enum may be extended in the future.
   */
  readonly directoryServiceOptions?: 'None' | 'AADDS' | 'AD' | 'AADKERB' | any;
  /**
   * Required for Managed Identities access using OAuth over SMB.
   */
  readonly smbOAuthSettings?: SmbOAuthSettings | any;
}

/**
 * BlobInventoryCreationTime definition.
 */
export interface BlobInventoryCreationTime {
  /**
   * When set the policy filters the objects that are created in the last N days. Where N is an integer value between 1 to 36500.
   */
  readonly lastNDays?: number | any;
}

/**
 * BlobInventoryPolicyDefinition definition.
 */
export interface BlobInventoryPolicyDefinition {
  /**
   * An object that defines the filter set.
   */
  readonly filters?: BlobInventoryPolicyFilter | any;
  /**
   * This is a required field, it specifies the format for the inventory files.
   */
  readonly format?: 'Csv' | 'Parquet' | any;
  /**
   * This is a required field. This field specifies the scope of the inventory created either at the blob or container level.
   */
  readonly objectType?: 'Blob' | 'Container' | any;
  /**
   * This is a required field. This field is used to schedule an inventory formation.
   */
  readonly schedule?: 'Daily' | 'Weekly' | any;
  /**
   * This is a required field. This field specifies the fields and properties of the object to be included in the inventory. The Schema field value 'Name' is always required. The valid values for this field for the 'Blob' definition.objectType include 'Name, Creation-Time, Last-Modified, Content-Length, Content-MD5, BlobType, AccessTier, AccessTierChangeTime, AccessTierInferred, Tags, Expiry-Time, hdi_isfolder, Owner, Group, Permissions, Acl, Snapshot, VersionId, IsCurrentVersion, Metadata, LastAccessTime, Tags, Etag, ContentType, ContentEncoding, ContentLanguage, ContentCRC64, CacheControl, ContentDisposition, LeaseStatus, LeaseState, LeaseDuration, ServerEncrypted, Deleted, DeletionId, DeletedTime, RemainingRetentionDays, ImmutabilityPolicyUntilDate, ImmutabilityPolicyMode, LegalHold, CopyId, CopyStatus, CopySource, CopyProgress, CopyCompletionTime, CopyStatusDescription, CustomerProvidedKeySha256, RehydratePriority, ArchiveStatus, XmsBlobSequenceNumber, EncryptionScope, IncrementalCopy, TagCount'. For Blob object type schema field value 'DeletedTime' is applicable only for Hns enabled accounts. The valid values for 'Container' definition.objectType include 'Name, Last-Modified, Metadata, LeaseStatus, LeaseState, LeaseDuration, PublicAccess, HasImmutabilityPolicy, HasLegalHold, Etag, DefaultEncryptionScope, DenyEncryptionScopeOverride, ImmutableStorageWithVersioningEnabled, Deleted, Version, DeletedTime, RemainingRetentionDays'. Schema field values 'Expiry-Time, hdi_isfolder, Owner, Group, Permissions, Acl, DeletionId' are valid only for Hns enabled accounts.Schema field values 'Tags, TagCount' are only valid for Non-Hns accounts.
   */
  readonly schemaFields?: string[] | any;
}

/**
 * BlobInventoryPolicyFilter definition.
 */
export interface BlobInventoryPolicyFilter {
  /**
   * An array of predefined enum values. Valid values include blockBlob, appendBlob, pageBlob. Hns accounts does not support pageBlobs. This field is required when definition.objectType property is set to 'Blob'.
   */
  readonly blobTypes?: string[] | any;
  /**
   * This property is used to filter objects based on the object creation time
   */
  readonly creationTime?: BlobInventoryCreationTime | any;
  /**
   * An array of strings with maximum 10 blob prefixes to be excluded from the inventory.
   */
  readonly excludePrefix?: string[] | any;
  /**
   * Includes blob versions in blob inventory when value is set to true. The definition.schemaFields values 'VersionId and IsCurrentVersion' are required if this property is set to true, else they must be excluded.
   */
  readonly includeBlobVersions?: boolean | any;
  /**
   * For 'Container' definition.objectType the definition.schemaFields must include 'Deleted, Version, DeletedTime and RemainingRetentionDays'. For 'Blob' definition.objectType and HNS enabled storage accounts the definition.schemaFields must include 'DeletionId, Deleted, DeletedTime and RemainingRetentionDays' and for Hns disabled accounts the definition.schemaFields must include 'Deleted and RemainingRetentionDays', else it must be excluded.
   */
  readonly includeDeleted?: boolean | any;
  /**
   * Includes blob snapshots in blob inventory when value is set to true. The definition.schemaFields value 'Snapshot' is required if this property is set to true, else it must be excluded.
   */
  readonly includeSnapshots?: boolean | any;
  /**
   * An array of strings with maximum 10 blob prefixes to be included in the inventory.
   */
  readonly prefixMatch?: string[] | any;
}

/**
 * BlobInventoryPolicyProps definition.
 */
export interface BlobInventoryPolicyProps {
  /**
   * The storage account blob inventory policy object. It is composed of policy rules.
   */
  readonly policy?: BlobInventoryPolicySchema | any;
}

/**
 * BlobInventoryPolicyRule definition.
 */
export interface BlobInventoryPolicyRule {
  /**
   * An object that defines the blob inventory policy rule.
   */
  readonly definition?: BlobInventoryPolicyDefinition | any;
  /**
   * Container name where blob inventory files are stored. Must be pre-created.
   */
  readonly destination?: string;
  /**
   * Rule is enabled when set to true.
   */
  readonly enabled?: boolean | any;
  /**
   * A rule name can contain any combination of alpha numeric characters. Rule name is case-sensitive. It must be unique within a policy.
   */
  readonly name?: string;
}

/**
 * BlobInventoryPolicySchema definition.
 */
export interface BlobInventoryPolicySchema {
  /**
   * Policy is enabled if set to true.
   */
  readonly enabled?: boolean | any;
  /**
   * The storage account blob inventory policy rules. The rule is applied when it is enabled.
   */
  readonly rules?: BlobInventoryPolicyRule[] | any;
}

/**
 * BlobServicePropertiesProps definition.
 */
export interface BlobServicePropertiesProps {
  /**
   * Deprecated in favor of isVersioningEnabled property.
   */
  readonly automaticSnapshotPolicyEnabled?: boolean | any;
  /**
   * The blob service properties for change feed events.
   */
  readonly changeFeed?: ChangeFeed | any;
  /**
   * The blob service properties for container soft delete.
   */
  readonly containerDeleteRetentionPolicy?: DeleteRetentionPolicy | any;
  /**
   * Specifies CORS rules for the Blob service. You can include up to five CorsRule elements in the request. If no CorsRule elements are included in the request body, all CORS rules will be deleted, and CORS will be disabled for the Blob service.
   */
  readonly cors?: CorsRules | any;
  /**
   * DefaultServiceVersion indicates the default version to use for requests to the Blob service if an incoming request’s version is not specified. Possible values include version 2008-10-27 and all more recent versions.
   */
  readonly defaultServiceVersion?: string;
  /**
   * The blob service properties for blob soft delete.
   */
  readonly deleteRetentionPolicy?: DeleteRetentionPolicy | any;
  /**
   * Versioning is enabled if set to true.
   */
  readonly isVersioningEnabled?: boolean | any;
  /**
   * The blob service property to configure last access time based tracking policy.
   */
  readonly lastAccessTimeTrackingPolicy?: LastAccessTimeTrackingPolicy | any;
  /**
   * The blob service properties for blob restore policy.
   */
  readonly restorePolicy?: any;
}

/**
 * ChangeFeed definition.
 */
export interface ChangeFeed {
  /**
   * Indicates whether change feed event logging is enabled for the Blob service.
   */
  readonly enabled?: boolean | any;
  /**
   * Indicates the duration of changeFeed retention in days. Minimum value is 1 day and maximum value is 146000 days (400 years). A null value indicates an infinite retention of the change feed.
   */
  readonly retentionInDays?: number | any;
}

/**
 * ContainerProps definition.
 */
export interface ContainerProps {
  /**
   * Default the container to use specified encryption scope for all writes.
   */
  readonly defaultEncryptionScope?: string;
  /**
   * Block override of encryption scope from the container default.
   */
  readonly denyEncryptionScopeOverride?: boolean | any;
  /**
   * Enable NFSv3 all squash on blob container.
   */
  readonly enableNfsV3AllSquash?: boolean | any;
  /**
   * Enable NFSv3 root squash on blob container.
   */
  readonly enableNfsV3RootSquash?: boolean | any;
  /**
   * The object level immutability property of the container. The property is immutable and can only be set to true at the container creation time. Existing containers must undergo a migration process.
   */
  readonly immutableStorageWithVersioning?: ImmutableStorageWithVersioning | any;
  /**
   * A name-value pair to associate with the container as metadata.
   */
  readonly metadata?: Record<string, string> | any;
  /**
   * Specifies whether data in the container may be accessed publicly and the level of access.
   */
  readonly publicAccess?: 'Container' | 'Blob' | 'None' | any;
}

/**
 * CorsRule definition.
 */
export interface CorsRule {
  /**
   * Required if CorsRule element is present. A list of headers allowed to be part of the cross-origin request.
   */
  readonly allowedHeaders?: string[] | any;
  /**
   * Required if CorsRule element is present. A list of HTTP methods that are allowed to be executed by the origin.
   */
  readonly allowedMethods?: 'DELETE' | 'GET' | 'HEAD' | 'MERGE' | 'POST' | 'OPTIONS' | 'PUT' | 'PATCH' | 'CONNECT' | 'TRACE'[] | any;
  /**
   * Required if CorsRule element is present. A list of origin domains that will be allowed via CORS, or "*" to allow all domains
   */
  readonly allowedOrigins?: string[] | any;
  /**
   * Required if CorsRule element is present. A list of response headers to expose to CORS clients.
   */
  readonly exposedHeaders?: string[] | any;
  /**
   * Required if CorsRule element is present. The number of seconds that the client/browser should cache a preflight response.
   */
  readonly maxAgeInSeconds?: number | any;
}

/**
 * CorsRules definition.
 */
export interface CorsRules {
  /**
   * The List of CORS rules. You can include up to five CorsRule elements in the request. 
   */
  readonly corsRules?: CorsRule[] | any;
}

/**
 * CustomDomain definition.
 */
export interface CustomDomain {
  /**
   * Gets or sets the custom domain name assigned to the storage account. Name is the CNAME source.
   */
  readonly name?: string;
  /**
   * Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates.
   */
  readonly useSubDomainName?: boolean | any;
}

/**
 * DateAfterCreation definition.
 */
export interface DateAfterCreation {
  /**
   * Value indicating the age in days after creation
   */
  readonly daysAfterCreationGreaterThan?: number | any;
  /**
   * Value indicating the age in days after last blob tier change time. This property is only applicable for tierToArchive actions and requires daysAfterCreationGreaterThan to be set for snapshots and blob version based actions. The blob will be archived if both the conditions are satisfied.
   */
  readonly daysAfterLastTierChangeGreaterThan?: number | any;
}

/**
 * DateAfterModification definition.
 */
export interface DateAfterModification {
  /**
   * Value indicating the age in days after blob creation.
   */
  readonly daysAfterCreationGreaterThan?: number | any;
  /**
   * Value indicating the age in days after last blob access. This property can only be used in conjunction with last access time tracking policy
   */
  readonly daysAfterLastAccessTimeGreaterThan?: number | any;
  /**
   * Value indicating the age in days after last blob tier change time. This property is only applicable for tierToArchive actions and requires daysAfterModificationGreaterThan to be set for baseBlobs based actions. The blob will be archived if both the conditions are satisfied.
   */
  readonly daysAfterLastTierChangeGreaterThan?: number | any;
  /**
   * Value indicating the age in days after last modification
   */
  readonly daysAfterModificationGreaterThan?: number | any;
}

/**
 * DeleteRetentionPolicy definition.
 */
export interface DeleteRetentionPolicy {
  /**
   * This property when set to true allows deletion of the soft deleted blob versions and snapshots. This property cannot be used blob restore policy. This property only applies to blob service and does not apply to containers or file share.
   */
  readonly allowPermanentDelete?: boolean | any;
  /**
   * Indicates the number of days that the deleted item should be retained. The minimum specified value can be 1 and the maximum value can be 365.
   */
  readonly days?: number | any;
  /**
   * Indicates whether DeleteRetentionPolicy is enabled.
   */
  readonly enabled?: boolean | any;
}

/**
 * Encryption definition.
 */
export interface Encryption {
  /**
   * The identity to be used with service-side encryption at rest.
   */
  readonly identity?: EncryptionIdentity | any;
  /**
   * The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault
   */
  readonly keySource?: 'Microsoft.Storage' | 'Microsoft.Keyvault' | any;
  /**
   * Properties provided by key vault.
   */
  readonly keyvaultproperties?: any;
  /**
   * A boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest.
   */
  readonly requireInfrastructureEncryption?: boolean | any;
  /**
   * List of services which support encryption.
   */
  readonly services?: EncryptionServices | any;
}

/**
 * EncryptionIdentity definition.
 */
export interface EncryptionIdentity {
  /**
   * ClientId of the multi-tenant application to be used in conjunction with the user-assigned identity for cross-tenant customer-managed-keys server-side encryption on the storage account.
   */
  readonly federatedIdentityClientId?: string;
  /**
   * Resource identifier of the UserAssigned identity to be associated with server-side encryption on the storage account.
   */
  readonly userAssignedIdentity?: string;
}

/**
 * EncryptionInTransit definition.
 */
export interface EncryptionInTransit {
  /**
   * Indicates whether encryption in transit is required
   */
  readonly required?: boolean | any;
}

/**
 * EncryptionScopeKeyVaultProps definition.
 */
export interface EncryptionScopeKeyVaultProps {
  /**
   * The object identifier for a key vault key object. When applied, the encryption scope will use the key referenced by the identifier to enable customer-managed key support on this encryption scope.
   */
  readonly keyUri?: string;
}

/**
 * EncryptionScopeProps definition.
 */
export interface EncryptionScopeProps {
  /**
   * The key vault properties for the encryption scope. This is a required field if encryption scope 'source' attribute is set to 'Microsoft.KeyVault'.
   */
  readonly keyVaultProperties?: any;
  /**
   * A boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest.
   */
  readonly requireInfrastructureEncryption?: boolean | any;
  /**
   * The provider for the encryption scope. Possible values (case-insensitive):  Microsoft.Storage, Microsoft.KeyVault.
   */
  readonly source?: 'Microsoft.Storage' | 'Microsoft.KeyVault' | any;
  /**
   * The state of the encryption scope. Possible values (case-insensitive):  Enabled, Disabled.
   */
  readonly state?: 'Enabled' | 'Disabled' | any;
}

/**
 * EncryptionService definition.
 */
export interface EncryptionService {
  /**
   * A boolean indicating whether or not the service encrypts the data as it is stored. Encryption at rest is enabled by default today and cannot be disabled.
   */
  readonly enabled?: boolean | any;
  /**
   * Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption key will be used. 'Service' key type implies that a default service key is used.
   */
  readonly keyType?: 'Service' | 'Account' | any;
}

/**
 * EncryptionServices definition.
 */
export interface EncryptionServices {
  /**
   * The encryption function of the blob storage service.
   */
  readonly blob?: EncryptionService | any;
  /**
   * The encryption function of the file storage service.
   */
  readonly file?: EncryptionService | any;
  /**
   * The encryption function of the queue storage service.
   */
  readonly queue?: EncryptionService | any;
  /**
   * The encryption function of the table storage service.
   */
  readonly table?: EncryptionService | any;
}

/**
 * ExecutionTarget definition.
 */
export interface ExecutionTarget {
  /**
   * List of object prefixes to be excluded from task execution. If there is a conflict between include and exclude prefixes, the exclude prefix will be the determining factor
   */
  readonly excludePrefix?: string[] | any;
  /**
   * Required list of object prefixes to be included for task execution
   */
  readonly prefix?: string[] | any;
}

/**
 * ExecutionTrigger definition.
 */
export interface ExecutionTrigger {
  /**
   * The trigger parameters of the storage task assignment execution
   */
  readonly parameters?: TriggerParameters | any;
}

/**
 * ExtendedLocation definition.
 */
export interface ExtendedLocation {
  /**
   * The name of the extended location.
   */
  readonly name?: string;
}

/**
 * FileServicePropertiesProps definition.
 */
export interface FileServicePropertiesProps {
  /**
   * Specifies CORS rules for the File service. You can include up to five CorsRule elements in the request. If no CorsRule elements are included in the request body, all CORS rules will be deleted, and CORS will be disabled for the File service.
   */
  readonly cors?: CorsRules | any;
  /**
   * Protocol settings for file service
   */
  readonly protocolSettings?: ProtocolSettings | any;
  /**
   * The file service properties for share soft delete.
   */
  readonly shareDeleteRetentionPolicy?: DeleteRetentionPolicy | any;
}

/**
 * FileShareProps definition.
 */
export interface FileShareProps {
  /**
   * Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and Cool. FileStorage account can choose Premium.
   */
  readonly accessTier?: 'TransactionOptimized' | 'Hot' | 'Cool' | 'Premium' | any;
  /**
   * The authentication protocol that is used for the file share. Can only be specified when creating a share.
   */
  readonly enabledProtocols?: 'SMB' | 'NFS' | any;
  /**
   * File Share Paid Bursting properties.
   */
  readonly fileSharePaidBursting?: FileSharePropertiesFileSharePaidBursting | any;
  /**
   * A name-value pair to associate with the share as metadata.
   */
  readonly metadata?: Record<string, string> | any;
  /**
   * The provisioned bandwidth of the share, in mebibytes per second. This property is only for file shares created under Files Provisioned v2 account type. Please refer to the GetFileServiceUsage API response for the minimum and maximum allowed value for provisioned bandwidth.
   */
  readonly provisionedBandwidthMibps?: number | any;
  /**
   * The provisioned IOPS of the share. This property is only for file shares created under Files Provisioned v2 account type. Please refer to the GetFileServiceUsage API response for the minimum and maximum allowed value for provisioned IOPS.
   */
  readonly provisionedIops?: number | any;
  /**
   * The property is for NFS share only. The default is NoRootSquash.
   */
  readonly rootSquash?: 'NoRootSquash' | 'RootSquash' | 'AllSquash' | any;
  /**
   * The provisioned size of the share, in gibibytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File Shares, the maximum size is 102400. For file shares created under Files Provisioned v2 account type, please refer to the GetFileServiceUsage API response for the minimum and maximum allowed provisioned storage size.
   */
  readonly shareQuota?: number | any;
  /**
   * List of stored access policies specified on the share.
   */
  readonly signedIdentifiers?: SignedIdentifier[] | any;
}

/**
 * FileSharePropertiesFileSharePaidBursting definition.
 */
export interface FileSharePropertiesFileSharePaidBursting {
  /**
   * Indicates whether paid bursting is enabled for the share. This property is only for file shares created under Files Provisioned v1 SSD account type.
   */
  readonly paidBurstingEnabled?: boolean | any;
  /**
   * The maximum paid bursting bandwidth for the share, in mebibytes per second. This property is only for file shares created under Files Provisioned v1 SSD account type. The maximum allowed value is 10340 which is the maximum allowed bandwidth for a share.
   */
  readonly paidBurstingMaxBandwidthMibps?: number | any;
  /**
   * The maximum paid bursting IOPS for the share. This property is only for file shares created under Files Provisioned v1 SSD account type. The maximum allowed value is 102400 which is the maximum allowed IOPS for a share.
   */
  readonly paidBurstingMaxIops?: number | any;
}

/**
 * IPRule definition.
 */
export interface IPRule {
  /**
   * The action of IP ACL rule.
   */
  readonly action?: 'Allow' | any;
  /**
   * Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.
   */
  readonly value?: string;
}

/**
 * Identity definition.
 */
export interface Identity {
  /**
   * Gets or sets a list of key value pairs that describe the set of User Assigned identities that will be used with this storage account. The key is the ARM resource identifier of the identity. Only 1 User Assigned identity is permitted here.
   */
  readonly userAssignedIdentities?: Record<string, UserAssignedIdentity> | any;
}

/**
 * ImmutabilityPolicyProperty definition.
 */
export interface ImmutabilityPolicyProperty {
  /**
   * This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API.
   */
  readonly allowProtectedAppendWrites?: boolean | any;
  /**
   * This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to both 'Append and Bock Blobs' while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API. The 'allowProtectedAppendWrites' and 'allowProtectedAppendWritesAll' properties are mutually exclusive.
   */
  readonly allowProtectedAppendWritesAll?: boolean | any;
  /**
   * The immutability period for the blobs in the container since the policy creation, in days.
   */
  readonly immutabilityPeriodSinceCreationInDays?: number | any;
}

/**
 * ImmutableStorageAccount definition.
 */
export interface ImmutableStorageAccount {
  /**
   * A boolean flag which enables account-level immutability. All the containers under such an account have object-level immutability enabled by default.
   */
  readonly enabled?: boolean | any;
  /**
   * Specifies the default account-level immutability policy which is inherited and applied to objects that do not possess an explicit immutability policy at the object level. The object-level immutability policy has higher precedence than the container-level immutability policy, which has a higher precedence than the account-level immutability policy.
   */
  readonly immutabilityPolicy?: any;
}

/**
 * ImmutableStorageWithVersioning definition.
 */
export interface ImmutableStorageWithVersioning {
  /**
   * This is an immutable property, when set to true it enables object level immutability at the container level.
   */
  readonly enabled?: boolean | any;
}

/**
 * KeyPolicy definition.
 */
export interface KeyPolicy {
  /**
   * The key expiration period in days.
   */
  readonly keyExpirationPeriodInDays?: number | any;
}

/**
 * KeyVaultProps definition.
 */
export interface KeyVaultProps {
  /**
   * The name of KeyVault key.
   */
  readonly keyname?: string;
  /**
   * The Uri of KeyVault.
   */
  readonly keyvaulturi?: string;
  /**
   * The version of KeyVault key.
   */
  readonly keyversion?: string;
}

/**
 * LastAccessTimeTrackingPolicy definition.
 */
export interface LastAccessTimeTrackingPolicy {
  /**
   * An array of predefined supported blob types. Only blockBlob is the supported value. This field is currently read only
   */
  readonly blobType?: string[] | any;
  /**
   * When set to true last access time based tracking is enabled.
   */
  readonly enable?: boolean | any;
  /**
   * Name of the policy. The valid value is AccessTimeTracking. This field is currently read only
   */
  readonly name?: 'AccessTimeTracking' | any;
  /**
   * The field specifies blob object tracking granularity in days, typically how often the blob object should be tracked.This field is currently read only with value as 1
   */
  readonly trackingGranularityInDays?: number | any;
}

/**
 * LocalUserProps definition.
 */
export interface LocalUserProps {
  /**
   * Indicates whether ACL authorization is allowed for this user. Set it to false to disallow using ACL authorization.
   */
  readonly allowAclAuthorization?: boolean | any;
  /**
   * Supplementary group membership. Only applicable for local users enabled for NFSv3 access.
   */
  readonly extendedGroups?: number[] | any;
  /**
   * An identifier for associating a group of users.
   */
  readonly groupId?: number | any;
  /**
   * Indicates whether shared key exists. Set it to false to remove existing shared key.
   */
  readonly hasSharedKey?: boolean | any;
  /**
   * Indicates whether ssh key exists. Set it to false to remove existing SSH key.
   */
  readonly hasSshKey?: boolean | any;
  /**
   * Indicates whether ssh password exists. Set it to false to remove existing SSH password.
   */
  readonly hasSshPassword?: boolean | any;
  /**
   * Optional, local user home directory.
   */
  readonly homeDirectory?: string;
  /**
   * Indicates if the local user is enabled for access with NFSv3 protocol.
   */
  readonly isNFSv3Enabled?: boolean | any;
  /**
   * The permission scopes of the local user.
   */
  readonly permissionScopes?: PermissionScope[] | any;
  /**
   * Optional, local user ssh authorized keys for SFTP.
   */
  readonly sshAuthorizedKeys?: SshPublicKey[] | any;
}

/**
 * ManagementPolicyAction definition.
 */
export interface ManagementPolicyAction {
  /**
   * The management policy action for base blob
   */
  readonly baseBlob?: ManagementPolicyBaseBlob | any;
  /**
   * The management policy action for snapshot
   */
  readonly snapshot?: ManagementPolicySnapShot | any;
  /**
   * The management policy action for version
   */
  readonly version?: ManagementPolicyVersion | any;
}

/**
 * ManagementPolicyBaseBlob definition.
 */
export interface ManagementPolicyBaseBlob {
  /**
   * The function to delete the blob
   */
  readonly delete?: DateAfterModification | any;
  /**
   * This property enables auto tiering of a blob from cool to hot on a blob access. This property requires tierToCool.daysAfterLastAccessTimeGreaterThan.
   */
  readonly enableAutoTierToHotFromCool?: boolean | any;
  /**
   * The function to tier blobs to archive storage.
   */
  readonly tierToArchive?: DateAfterModification | any;
  /**
   * The function to tier blobs to cold storage.
   */
  readonly tierToCold?: DateAfterModification | any;
  /**
   * The function to tier blobs to cool storage.
   */
  readonly tierToCool?: DateAfterModification | any;
  /**
   * The function to tier blobs to hot storage. This action can only be used with Premium Block Blob Storage Accounts
   */
  readonly tierToHot?: DateAfterModification | any;
}

/**
 * ManagementPolicyDefinition definition.
 */
export interface ManagementPolicyDefinition {
  /**
   * An object that defines the action set.
   */
  readonly actions?: ManagementPolicyAction | any;
  /**
   * An object that defines the filter set.
   */
  readonly filters?: ManagementPolicyFilter | any;
}

/**
 * ManagementPolicyFilter definition.
 */
export interface ManagementPolicyFilter {
  /**
   * An array of blob index tag based filters, there can be at most 10 tag filters
   */
  readonly blobIndexMatch?: TagFilter[] | any;
  /**
   * An array of predefined enum values. Currently blockBlob supports all tiering and delete actions. Only delete actions are supported for appendBlob.
   */
  readonly blobTypes?: string[] | any;
  /**
   * An array of strings for prefixes to be match.
   */
  readonly prefixMatch?: string[] | any;
}

/**
 * ManagementPolicyProps definition.
 */
export interface ManagementPolicyProps {
  /**
   * The Storage Account ManagementPolicy, in JSON format. See more details in: https://learn.microsoft.com/azure/storage/blobs/lifecycle-management-overview.
   */
  readonly policy?: ManagementPolicySchema | any;
}

/**
 * ManagementPolicyRule definition.
 */
export interface ManagementPolicyRule {
  /**
   * An object that defines the Lifecycle rule.
   */
  readonly definition?: ManagementPolicyDefinition | any;
  /**
   * Rule is enabled if set to true.
   */
  readonly enabled?: boolean | any;
  /**
   * A rule name can contain any combination of alpha numeric characters. Rule name is case-sensitive. It must be unique within a policy.
   */
  readonly name?: string;
}

/**
 * ManagementPolicySchema definition.
 */
export interface ManagementPolicySchema {
  /**
   * The Storage Account ManagementPolicies Rules. See more details in: https://learn.microsoft.com/azure/storage/blobs/lifecycle-management-overview.
   */
  readonly rules?: ManagementPolicyRule[] | any;
}

/**
 * ManagementPolicySnapShot definition.
 */
export interface ManagementPolicySnapShot {
  /**
   * The function to delete the blob snapshot
   */
  readonly delete?: DateAfterCreation | any;
  /**
   * The function to tier blob snapshot to archive storage.
   */
  readonly tierToArchive?: DateAfterCreation | any;
  /**
   * The function to tier blobs to cold storage.
   */
  readonly tierToCold?: DateAfterCreation | any;
  /**
   * The function to tier blob snapshot to cool storage.
   */
  readonly tierToCool?: DateAfterCreation | any;
  /**
   * The function to tier blobs to hot storage. This action can only be used with Premium Block Blob Storage Accounts
   */
  readonly tierToHot?: DateAfterCreation | any;
}

/**
 * ManagementPolicyVersion definition.
 */
export interface ManagementPolicyVersion {
  /**
   * The function to delete the blob version
   */
  readonly delete?: DateAfterCreation | any;
  /**
   * The function to tier blob version to archive storage.
   */
  readonly tierToArchive?: DateAfterCreation | any;
  /**
   * The function to tier blobs to cold storage.
   */
  readonly tierToCold?: DateAfterCreation | any;
  /**
   * The function to tier blob version to cool storage.
   */
  readonly tierToCool?: DateAfterCreation | any;
  /**
   * The function to tier blobs to hot storage. This action can only be used with Premium Block Blob Storage Accounts
   */
  readonly tierToHot?: DateAfterCreation | any;
}

/**
 * Multichannel definition.
 */
export interface Multichannel {
  /**
   * Indicates whether multichannel is enabled
   */
  readonly enabled?: boolean | any;
}

/**
 * NetworkRuleSet definition.
 */
export interface NetworkRuleSet {
  /**
   * Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, "Logging, Metrics"), or None to bypass none of those traffics.
   */
  readonly bypass?: 'None' | 'Logging' | 'Metrics' | 'AzureServices' | any;
  /**
   * Specifies the default action of allow or deny when no other rules match.
   */
  readonly defaultAction?: 'Allow' | 'Deny' | any;
  /**
   * Sets the IP ACL rules
   */
  readonly ipRules?: IPRule[] | any;
  /**
   * Sets the resource access rules
   */
  readonly resourceAccessRules?: ResourceAccessRule[] | any;
  /**
   * Sets the virtual network rules
   */
  readonly virtualNetworkRules?: VirtualNetworkRule[] | any;
}

/**
 * NfsSetting definition.
 */
export interface NfsSetting {
  /**
   * Encryption in transit setting.
   */
  readonly encryptionInTransit?: EncryptionInTransit | any;
}

/**
 * ObjectReplicationPolicyFilter definition.
 */
export interface ObjectReplicationPolicyFilter {
  /**
   * Blobs created after the time will be replicated to the destination. It must be in datetime format 'yyyy-MM-ddTHH:mm:ssZ'. Example: 2020-02-19T16:05:00Z
   */
  readonly minCreationTime?: string;
  /**
   * Optional. Filters the results to replicate only blobs whose names begin with the specified prefix.
   */
  readonly prefixMatch?: string[] | any;
}

/**
 * ObjectReplicationPolicyProps definition.
 */
export interface ObjectReplicationPolicyProps {
  /**
   * Required. Destination account name. It should be full resource id if allowCrossTenantReplication set to false.
   */
  readonly destinationAccount?: string;
  /**
   * Optional. The object replication policy metrics feature options.
   */
  readonly metrics?: ObjectReplicationPolicyPropertiesMetrics | any;
  /**
   * The storage account object replication rules.
   */
  readonly rules?: ObjectReplicationPolicyRule[] | any;
  /**
   * Required. Source account name. It should be full resource id if allowCrossTenantReplication set to false.
   */
  readonly sourceAccount?: string;
}

/**
 * ObjectReplicationPolicyPropertiesMetrics definition.
 */
export interface ObjectReplicationPolicyPropertiesMetrics {
  /**
   * Indicates whether object replication metrics feature is enabled for the policy.
   */
  readonly enabled?: boolean | any;
}

/**
 * ObjectReplicationPolicyRule definition.
 */
export interface ObjectReplicationPolicyRule {
  /**
   * Required. Destination container name.
   */
  readonly destinationContainer?: string;
  /**
   * Optional. An object that defines the filter set.
   */
  readonly filters?: ObjectReplicationPolicyFilter | any;
  /**
   * Rule Id is auto-generated for each new rule on destination account. It is required for put policy on source account.
   */
  readonly ruleId?: string;
  /**
   * Required. Source container name.
   */
  readonly sourceContainer?: string;
}

/**
 * PermissionScope definition.
 */
export interface PermissionScope {
  /**
   * The permissions for the local user. Possible values include: Read (r), Write (w), Delete (d), List (l), Create (c), Modify Ownership (o), and Modify Permissions (p).
   */
  readonly permissions?: string;
  /**
   * The name of resource, normally the container name or the file share name, used by the local user.
   */
  readonly resourceName?: string;
  /**
   * The service used by the local user, e.g. blob, file.
   */
  readonly service?: string;
}

/**
 * Placement definition.
 */
export interface Placement {
  /**
   * The availability zone pinning policy for the storage account.
   */
  readonly zonePlacementPolicy?: 'Any' | 'None' | any;
}

/**
 * PrivateEndpoint definition.
 */
export interface PrivateEndpoint {
}

/**
 * PrivateEndpointConnectionProps definition.
 */
export interface PrivateEndpointConnectionProps {
  /**
   * The resource of private end point.
   */
  readonly privateEndpoint?: PrivateEndpoint | any;
  /**
   * A collection of information about the state of the connection between service consumer and provider.
   */
  readonly privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState | any;
}

/**
 * PrivateLinkServiceConnectionState definition.
 */
export interface PrivateLinkServiceConnectionState {
  /**
   * A message indicating if changes on the service provider require any updates on the consumer.
   */
  readonly actionRequired?: string;
  /**
   * The reason for approval/rejection of the connection.
   */
  readonly description?: string;
  /**
   * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
   */
  readonly status?: 'Pending' | 'Approved' | 'Rejected' | any;
}

/**
 * ProtocolSettings definition.
 */
export interface ProtocolSettings {
  /**
   * Setting for NFS protocol
   */
  readonly nfs?: NfsSetting | any;
  /**
   * Setting for SMB protocol
   */
  readonly smb?: SmbSetting | any;
}

/**
 * QueueProps definition.
 */
export interface QueueProps {
  /**
   * A name-value pair that represents queue metadata.
   */
  readonly metadata?: Record<string, string> | any;
}

/**
 * QueueServicePropertiesProps definition.
 */
export interface QueueServicePropertiesProps {
  /**
   * Specifies CORS rules for the Queue service. You can include up to five CorsRule elements in the request. If no CorsRule elements are included in the request body, all CORS rules will be deleted, and CORS will be disabled for the Queue service.
   */
  readonly cors?: CorsRules | any;
}

/**
 * ResourceAccessRule definition.
 */
export interface ResourceAccessRule {
  /**
   * Resource Id
   */
  readonly resourceId?: string;
  /**
   * Tenant Id
   */
  readonly tenantId?: string;
}

/**
 * RestorePolicyProps definition.
 */
export interface RestorePolicyProps {
  /**
   * how long this blob can be restored. It should be great than zero and less than DeleteRetentionPolicy.days.
   */
  readonly days?: number | any;
  /**
   * Blob restore is enabled if set to true.
   */
  readonly enabled?: boolean | any;
}

/**
 * RoutingPreference definition.
 */
export interface RoutingPreference {
  /**
   * A boolean flag which indicates whether internet routing storage endpoints are to be published
   */
  readonly publishInternetEndpoints?: boolean | any;
  /**
   * A boolean flag which indicates whether microsoft routing storage endpoints are to be published
   */
  readonly publishMicrosoftEndpoints?: boolean | any;
  /**
   * Routing Choice defines the kind of network routing opted by the user.
   */
  readonly routingChoice?: 'MicrosoftRouting' | 'InternetRouting' | any;
}

/**
 * SasPolicy definition.
 */
export interface SasPolicy {
  /**
   * The SAS Expiration Action defines the action to be performed when sasPolicy.sasExpirationPeriod is violated. The 'Log' action can be used for audit purposes and the 'Block' action can be used to block and deny the usage of SAS tokens that do not adhere to the sas policy expiration period.
   */
  readonly expirationAction?: 'Log' | 'Block' | any;
  /**
   * The SAS expiration period, DD.HH:MM:SS.
   */
  readonly sasExpirationPeriod?: string;
}

/**
 * SignedIdentifier definition.
 */
export interface SignedIdentifier {
  /**
   * Access policy
   */
  readonly accessPolicy?: AccessPolicy | any;
  /**
   * An unique identifier of the stored access policy.
   */
  readonly id?: string;
}

/**
 * Sku definition.
 */
export interface Sku {
  /**
   * The SKU name. Required for account creation; optional for update. Note that in older versions, SKU name was called accountType.
   */
  readonly name?: 'Standard_LRS' | 'Standard_GRS' | 'Standard_RAGRS' | 'Standard_ZRS' | 'Premium_LRS' | 'Premium_ZRS' | 'Standard_GZRS' | 'Standard_RAGZRS' | 'StandardV2_LRS' | 'StandardV2_GRS' | 'StandardV2_ZRS' | 'StandardV2_GZRS' | 'PremiumV2_LRS' | 'PremiumV2_ZRS' | any;
}

/**
 * SmbOAuthSettings definition.
 */
export interface SmbOAuthSettings {
  /**
   * Specifies if managed identities can access SMB shares using OAuth. The default interpretation is false for this property.
   */
  readonly isSmbOAuthEnabled?: boolean | any;
}

/**
 * SmbSetting definition.
 */
export interface SmbSetting {
  /**
   * SMB authentication methods supported by server. Valid values are NTLMv2, Kerberos. Should be passed as a string with delimiter ';'.
   */
  readonly authenticationMethods?: string;
  /**
   * SMB channel encryption supported by server. Valid values are AES-128-CCM, AES-128-GCM, AES-256-GCM. Should be passed as a string with delimiter ';'.
   */
  readonly channelEncryption?: string;
  /**
   * Encryption in transit setting.
   */
  readonly encryptionInTransit?: EncryptionInTransit | any;
  /**
   * Kerberos ticket encryption supported by server. Valid values are RC4-HMAC, AES-256. Should be passed as a string with delimiter ';'
   */
  readonly kerberosTicketEncryption?: string;
  /**
   * Multichannel setting. Applies to Premium FileStorage only.
   */
  readonly multichannel?: Multichannel | any;
  /**
   * SMB protocol versions supported by server. Valid values are SMB2.1, SMB3.0, SMB3.1.1. Should be passed as a string with delimiter ';'.
   */
  readonly versions?: string;
}

/**
 * SshPublicKey definition.
 */
export interface SshPublicKey {
  /**
   * Optional. It is used to store the function/usage of the key
   */
  readonly description?: string;
  /**
   * Ssh public key base64 encoded. The format should be: '<keyType> <keyData>', e.g. ssh-rsa AAAABBBB
   */
  readonly key?: string;
}

/**
 * StorageAccountPropertiesCreateParameters definition.
 */
export interface StorageAccountPropertiesCreateParameters {
  /**
   * Required for storage accounts where kind = BlobStorage. The access tier is used for billing. The 'Premium' access tier is the default value for premium block blobs storage account type and it cannot be changed for the premium block blobs storage account type.
   */
  readonly accessTier?: 'Hot' | 'Cool' | 'Premium' | 'Cold' | any;
  /**
   * Allow or disallow public access to all blobs or containers in the storage account. The default interpretation is false for this property.
   */
  readonly allowBlobPublicAccess?: boolean | any;
  /**
   * Allow or disallow cross AAD tenant object replication. Set this property to true for new or existing accounts only if object replication policies will involve storage accounts in different AAD tenants. The default interpretation is false for new accounts to follow best security practices by default.
   */
  readonly allowCrossTenantReplication?: boolean | any;
  /**
   * Indicates whether the storage account permits requests to be authorized with the account access key via Shared Key. If false, then all requests, including shared access signatures, must be authorized with Azure Active Directory (Azure AD). The default value is null, which is equivalent to true.
   */
  readonly allowSharedKeyAccess?: boolean | any;
  /**
   * Restrict copy to and from Storage Accounts within an AAD tenant or with Private Links to the same VNet.
   */
  readonly allowedCopyScope?: 'PrivateLink' | 'AAD' | any;
  /**
   * Provides the identity based authentication settings for Azure Files.
   */
  readonly azureFilesIdentityBasedAuthentication?: AzureFilesIdentityBasedAuthentication | any;
  /**
   * User domain assigned to the storage account. Name is the CNAME source. Only one custom domain is supported per storage account at this time. To clear the existing custom domain, use an empty string for the custom domain name property.
   */
  readonly customDomain?: CustomDomain | any;
  /**
   * A boolean flag which indicates whether the default authentication is OAuth or not. The default interpretation is false for this property.
   */
  readonly defaultToOAuthAuthentication?: boolean | any;
  /**
   * Creation time of the deleted account. This property should only be provided while requesting deleted storage account recovery.
   */
  readonly deletedAccountCreationTime?: string;
  /**
   * Allows you to specify the type of endpoint. Set this to AzureDNSZone to create a large number of accounts in a single subscription, which creates accounts in an Azure DNS Zone and the endpoint URL will have an alphanumeric DNS Zone identifier.
   */
  readonly dnsEndpointType?: 'Standard' | 'AzureDnsZone' | any;
  /**
   * Enables extended group support with local users feature, if set to true
   */
  readonly enableExtendedGroups?: boolean | any;
  /**
   * Encryption settings to be used for server-side encryption for the storage account.
   */
  readonly encryption?: Encryption | any;
  /**
   * The property is immutable and can only be set to true at the account creation time. When set to true, it enables object level immutability for all the new containers in the account by default.
   */
  readonly immutableStorageWithVersioning?: ImmutableStorageAccount | any;
  /**
   * Account HierarchicalNamespace enabled if sets to true.
   */
  readonly isHnsEnabled?: boolean | any;
  /**
   * Enables local users feature, if set to true
   */
  readonly isLocalUserEnabled?: boolean | any;
  /**
   * NFS 3.0 protocol support enabled if set to true.
   */
  readonly isNfsV3Enabled?: boolean | any;
  /**
   * Enables Secure File Transfer Protocol, if set to true
   */
  readonly isSftpEnabled?: boolean | any;
  /**
   * KeyPolicy assigned to the storage account.
   */
  readonly keyPolicy?: KeyPolicy | any;
  /**
   * Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled.
   */
  readonly largeFileSharesState?: 'Disabled' | 'Enabled' | any;
  /**
   * Set the minimum TLS version to be permitted on requests to storage. The default interpretation is TLS 1.0 for this property.
   */
  readonly minimumTlsVersion?: 'TLS1_0' | 'TLS1_1' | 'TLS1_2' | 'TLS1_3' | any;
  /**
   * Network rule set
   */
  readonly networkAcls?: NetworkRuleSet | any;
  /**
   * Allow, disallow, or let Network Security Perimeter configuration to evaluate public network access to Storage Account. Value is optional but if passed in, must be 'Enabled', 'Disabled' or 'SecuredByPerimeter'.
   */
  readonly publicNetworkAccess?: 'Enabled' | 'Disabled' | 'SecuredByPerimeter' | any;
  /**
   * Maintains information about the network routing choice opted by the user for data transfer
   */
  readonly routingPreference?: RoutingPreference | any;
  /**
   * SasPolicy assigned to the storage account.
   */
  readonly sasPolicy?: SasPolicy | any;
  /**
   * Allows https traffic only to storage service if sets to true. The default value is true since API version 2019-04-01.
   */
  readonly supportsHttpsTrafficOnly?: boolean | any;
}

/**
 * StorageTaskAssignmentExecutionContext definition.
 */
export interface StorageTaskAssignmentExecutionContext {
  /**
   * Execution target of the storage task assignment
   */
  readonly target?: ExecutionTarget | any;
  /**
   * Execution trigger of the storage task assignment
   */
  readonly trigger?: ExecutionTrigger | any;
}

/**
 * StorageTaskAssignmentProps definition.
 */
export interface StorageTaskAssignmentProps {
  /**
   * Text that describes the purpose of the storage task assignment
   */
  readonly description?: string;
  /**
   * Whether the storage task assignment is enabled or not
   */
  readonly enabled?: boolean | any;
  /**
   * The storage task assignment execution context
   */
  readonly executionContext?: StorageTaskAssignmentExecutionContext | any;
  /**
   * The storage task assignment report
   */
  readonly report?: StorageTaskAssignmentReport | any;
  /**
   * Run status of storage task assignment
   */
  readonly runStatus?: any;
  /**
   * Id of the corresponding storage task
   */
  readonly taskId?: string;
}

/**
 * StorageTaskAssignmentReport definition.
 */
export interface StorageTaskAssignmentReport {
  /**
   * The container prefix for the location of storage task assignment report
   */
  readonly prefix?: string;
}

/**
 * StorageTaskReportProps definition.
 */
export interface StorageTaskReportProps {
}

/**
 * TableAccessPolicy definition.
 */
export interface TableAccessPolicy {
  /**
   * Expiry time of the access policy
   */
  readonly expiryTime?: string;
  /**
   * Required. List of abbreviated permissions. Supported permission values include 'r','a','u','d'
   */
  readonly permission?: string;
  /**
   * Start time of the access policy
   */
  readonly startTime?: string;
}

/**
 * TableProps definition.
 */
export interface TableProps {
  /**
   * List of stored access policies specified on the table.
   */
  readonly signedIdentifiers?: TableSignedIdentifier[] | any;
}

/**
 * TableServicePropertiesProps definition.
 */
export interface TableServicePropertiesProps {
  /**
   * Specifies CORS rules for the Table service. You can include up to five CorsRule elements in the request. If no CorsRule elements are included in the request body, all CORS rules will be deleted, and CORS will be disabled for the Table service.
   */
  readonly cors?: CorsRules | any;
}

/**
 * TableSignedIdentifier definition.
 */
export interface TableSignedIdentifier {
  /**
   * Access policy
   */
  readonly accessPolicy?: TableAccessPolicy | any;
  /**
   * unique-64-character-value of the stored access policy.
   */
  readonly id?: string;
}

/**
 * TagFilter definition.
 */
export interface TagFilter {
  /**
   * This is the filter tag name, it can have 1 - 128 characters
   *
   * @remarks
   * Length: 1-128 characters
   */
  readonly name?: string;
  /**
   * This is the comparison operator which is used for object comparison and filtering. Only == (equality operator) is currently supported
   */
  readonly op?: string;
  /**
   * This is the filter tag value field used for tag based filtering, it can have 0 - 256 characters
   *
   * @remarks
   * Length: 0-256 characters
   */
  readonly value?: string;
}

/**
 * TriggerParameters definition.
 */
export interface TriggerParameters {
  /**
   * When to end task execution. This is a required field when ExecutionTrigger.properties.type is 'OnSchedule'; this property should not be present when ExecutionTrigger.properties.type is 'RunOnce'
   */
  readonly endBy?: string;
  /**
   * Run interval of task execution. This is a required field when ExecutionTrigger.properties.type is 'OnSchedule'; this property should not be present when ExecutionTrigger.properties.type is 'RunOnce'
   */
  readonly interval?: number | any;
  /**
   * Run interval unit of task execution. This is a required field when ExecutionTrigger.properties.type is 'OnSchedule'; this property should not be present when ExecutionTrigger.properties.type is 'RunOnce'
   */
  readonly intervalUnit?: 'Days' | any;
  /**
   * When to start task execution. This is a required field when ExecutionTrigger.properties.type is 'OnSchedule'; this property should not be present when ExecutionTrigger.properties.type is 'RunOnce'
   */
  readonly startFrom?: string;
  /**
   * When to start task execution. This is an optional field when ExecutionTrigger.properties.type is 'RunOnce'; this property should not be present when ExecutionTrigger.properties.type is 'OnSchedule'
   */
  readonly startOn?: string;
}

/**
 * UserAssignedIdentity definition.
 */
export interface UserAssignedIdentity {
}

/**
 * VirtualNetworkRule definition.
 */
export interface VirtualNetworkRule {
  /**
   * The action of virtual network rule.
   */
  readonly action?: 'Allow' | any;
  /**
   * Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
   */
  readonly id?: string;
  /**
   * Gets the state of virtual network rule.
   */
  readonly state?: 'Provisioning' | 'Deprovisioning' | 'Succeeded' | 'Failed' | 'NetworkSourceDeleted' | any;
}

/**
 * storageAccounts_blobServices_childResource definition.
 */
export interface storageAccounts_blobServices_childResource {
  /**
   * name
   */
  readonly name?: 'default' | any;
  /**
   * The properties of a storage account's Blob service.
   */
  readonly properties?: any;
}

/**
 * storageAccounts_blobServices_containers_childResource definition.
 */
export interface storageAccounts_blobServices_containers_childResource {
  /**
   * The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
   *
   * @remarks
   * Length: 3-63 characters
   */
  readonly name?: string;
  /**
   * Properties of the blob container.
   */
  readonly properties?: any;
}

/**
 * storageAccounts_blobServices_containers_immutabilityPolicies_childResource definition.
 */
export interface storageAccounts_blobServices_containers_immutabilityPolicies_childResource {
  /**
   * name
   */
  readonly name?: 'default' | any;
  /**
   * The properties of an ImmutabilityPolicy of a blob container.
   */
  readonly properties?: ImmutabilityPolicyProperty | any;
}

/**
 * storageAccounts_encryptionScopes_childResource definition.
 */
export interface storageAccounts_encryptionScopes_childResource {
  /**
   * The name of the encryption scope within the specified storage account. Encryption scope names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
   *
   * @remarks
   * Length: 3-63 characters
   */
  readonly name?: string;
  /**
   * Properties of the encryption scope.
   */
  readonly properties?: any;
}

/**
 * storageAccounts_fileServices_childResource definition.
 */
export interface storageAccounts_fileServices_childResource {
  /**
   * name
   */
  readonly name?: 'default' | any;
  /**
   * The properties of File services in storage account.
   */
  readonly properties?: any;
}

/**
 * storageAccounts_fileServices_shares_childResource definition.
 */
export interface storageAccounts_fileServices_shares_childResource {
  /**
   * The name of the file share within the specified storage account. File share names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
   *
   * @remarks
   * Length: 3-63 characters
   */
  readonly name?: string;
  /**
   * Properties of the file share.
   */
  readonly properties?: FileShareProps | any;
}

/**
 * storageAccounts_inventoryPolicies_childResource definition.
 */
export interface storageAccounts_inventoryPolicies_childResource {
  /**
   * The name of the storage account blob inventory policy. It should always be 'default'
   */
  readonly name?: 'default' | any;
  /**
   * Returns the storage account blob inventory policy rules.
   */
  readonly properties?: BlobInventoryPolicyProps | any;
}

/**
 * storageAccounts_localUsers_childResource definition.
 */
export interface storageAccounts_localUsers_childResource {
  /**
   * The name of local user. The username must contain lowercase letters and numbers only. It must be unique only within the storage account.
   *
   * @remarks
   * Length: 3-64 characters
   */
  readonly name?: string;
  /**
   * Storage account local user properties.
   */
  readonly properties?: LocalUserProps | any;
}

/**
 * storageAccounts_managementPolicies_childResource definition.
 */
export interface storageAccounts_managementPolicies_childResource {
  /**
   * The name of the Storage Account Management Policy. It should always be 'default'
   */
  readonly name?: 'default' | any;
  /**
   * Returns the Storage Account Data Policies Rules.
   */
  readonly properties?: ManagementPolicyProps | any;
}

/**
 * storageAccounts_objectReplicationPolicies_childResource definition.
 */
export interface storageAccounts_objectReplicationPolicies_childResource {
  /**
   * For the destination account, provide the value 'default'. Configure the policy on the destination account first. For the source account, provide the value of the policy ID that is returned when you download the policy that was defined on the destination account. The policy is downloaded as a JSON file.
   *
   * @remarks
   * Length: 1-unlimited characters
   */
  readonly name?: string;
  /**
   * Returns the Storage Account Object Replication Policy.
   */
  readonly properties?: ObjectReplicationPolicyProps | any;
}

/**
 * storageAccounts_privateEndpointConnections_childResource definition.
 */
export interface storageAccounts_privateEndpointConnections_childResource {
  /**
   * The name of the private endpoint connection associated with the Azure resource
   */
  readonly name?: string;
  /**
   * Resource properties.
   */
  readonly properties?: PrivateEndpointConnectionProps | any;
}

/**
 * storageAccounts_queueServices_childResource definition.
 */
export interface storageAccounts_queueServices_childResource {
  /**
   * name
   */
  readonly name?: 'default' | any;
  /**
   * The properties of a storage account's Queue service.
   */
  readonly properties?: QueueServicePropertiesProps | any;
}

/**
 * storageAccounts_queueServices_queues_childResource definition.
 */
export interface storageAccounts_queueServices_queues_childResource {
  /**
   * A queue name must be unique within a storage account and must be between 3 and 63 characters.The name must comprise of lowercase alphanumeric and dash(-) characters only, it should begin and end with an alphanumeric character and it cannot have two consecutive dash(-) characters.
   */
  readonly name?: string | any;
  /**
   * Queue resource properties.
   */
  readonly properties?: QueueProps | any;
}

/**
 * storageAccounts_storageTaskAssignments_childResource definition.
 */
export interface storageAccounts_storageTaskAssignments_childResource {
  /**
   * The name of the storage task assignment within the specified resource group. Storage task assignment names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
   */
  readonly name?: string | any;
  /**
   * Properties of the storage task assignment.
   */
  readonly properties?: StorageTaskAssignmentProps | any;
}

/**
 * storageAccounts_tableServices_childResource definition.
 */
export interface storageAccounts_tableServices_childResource {
  /**
   * name
   */
  readonly name?: 'default' | any;
  /**
   * The properties of a storage account's Table service.
   */
  readonly properties?: TableServicePropertiesProps | any;
}

/**
 * storageAccounts_tableServices_tables_childResource definition.
 */
export interface storageAccounts_tableServices_tables_childResource {
  /**
   * A table name must be unique within a storage account and must be between 3 and 63 characters.The name must comprise of only alphanumeric characters and it cannot begin with a numeric character.
   */
  readonly name?: string | any;
  /**
   * Table resource properties.
   */
  readonly properties?: any;
}

/**
 * Properties for Microsoft.Storage/storageAccounts (L1 construct).
 *
 * @remarks
 * Microsoft.Storage/storageAccounts
 *
 * **ARM Resource Type**: `Microsoft.Storage/storageAccounts`
 * **API Version**: `2025-01-01`
 *
 * Direct mapping to ARM resource properties with no defaults or transformations.
 */
export interface ArmStorageAccountsProps {
  /**
   * Optional. Set the extended location of the resource. If not set, the storage account will be created in Azure main region. Otherwise it will be created in the specified extended location
   */
  readonly extendedLocation?: ExtendedLocation | any;
  /**
   * The identity of the resource.
   */
  readonly identity?: Identity | any;
  /**
   * Required. Indicates the type of storage account.
   */
  readonly kind?: 'Storage' | 'StorageV2' | 'BlobStorage' | 'FileStorage' | 'BlockBlobStorage' | any;
  /**
   * Required. Gets or sets the location of the resource. This will be one of the supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.). The geo region of a resource cannot be changed once it is created, but if an identical geo region is specified on update, the request will succeed.
   */
  readonly location?: string;
  /**
   * The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
   */
  readonly name: string | any;
  /**
   * Optional. Gets or sets the zonal placement details for the storage account.
   */
  readonly placement?: Placement | any;
  /**
   * The parameters used to create the storage account.
   */
  readonly properties?: StorageAccountPropertiesCreateParameters | any;
  /**
   * Required. Gets or sets the SKU name.
   */
  readonly sku?: Sku | any;
  /**
   * Gets or sets a list of key value pairs that describe the resource. These tags can be used for viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key with a length no greater than 128 characters and a value with a length no greater than 256 characters.
   */
  readonly tags?: Record<string, string> | any;
  /**
   * Optional. Gets or sets the pinned logical availability zone for the storage account.
   */
  readonly zones?: string[] | any;
}

/**
 * Properties for Microsoft.Storage/storageAccounts/blobServices (L1 construct).
 *
 * @remarks
 * Microsoft.Storage/storageAccounts/blobServices
 *
 * **ARM Resource Type**: `Microsoft.Storage/storageAccounts/blobServices`
 * **API Version**: `2025-01-01`
 *
 * Direct mapping to ARM resource properties with no defaults or transformations.
 */
export interface ArmStorageAccountsBlobServicesProps {
  /**
   * name
   */
  readonly name: string | any;
  /**
   * The properties of a storage account's Blob service.
   */
  readonly properties?: any;
}

/**
 * Properties for Microsoft.Storage/storageAccounts/blobServices/containers (L1 construct).
 *
 * @remarks
 * Microsoft.Storage/storageAccounts/blobServices/containers
 *
 * **ARM Resource Type**: `Microsoft.Storage/storageAccounts/blobServices/containers`
 * **API Version**: `2025-01-01`
 *
 * Direct mapping to ARM resource properties with no defaults or transformations.
 */
export interface ArmStorageAccountsBlobServicesContainersProps {
  /**
   * The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
   *
   * @remarks
   * Length: 3-63 characters
   */
  readonly name: string;
  /**
   * Properties of the blob container.
   */
  readonly properties?: any;
}

/**
 * Properties for Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies (L1 construct).
 *
 * @remarks
 * Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies
 *
 * **ARM Resource Type**: `Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies`
 * **API Version**: `2025-01-01`
 *
 * Direct mapping to ARM resource properties with no defaults or transformations.
 */
export interface ArmStorageAccountsBlobServicesContainersImmutabilityPoliciesProps {
  /**
   * name
   */
  readonly name: string | any;
  /**
   * The properties of an ImmutabilityPolicy of a blob container.
   */
  readonly properties?: ImmutabilityPolicyProperty | any;
}

/**
 * Properties for Microsoft.Storage/storageAccounts/encryptionScopes (L1 construct).
 *
 * @remarks
 * Microsoft.Storage/storageAccounts/encryptionScopes
 *
 * **ARM Resource Type**: `Microsoft.Storage/storageAccounts/encryptionScopes`
 * **API Version**: `2025-01-01`
 *
 * Direct mapping to ARM resource properties with no defaults or transformations.
 */
export interface ArmStorageAccountsEncryptionScopesProps {
  /**
   * The name of the encryption scope within the specified storage account. Encryption scope names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
   *
   * @remarks
   * Length: 3-63 characters
   */
  readonly name: string;
  /**
   * Properties of the encryption scope.
   */
  readonly properties?: any;
}

/**
 * Properties for Microsoft.Storage/storageAccounts/fileServices (L1 construct).
 *
 * @remarks
 * Microsoft.Storage/storageAccounts/fileServices
 *
 * **ARM Resource Type**: `Microsoft.Storage/storageAccounts/fileServices`
 * **API Version**: `2025-01-01`
 *
 * Direct mapping to ARM resource properties with no defaults or transformations.
 */
export interface ArmStorageAccountsFileServicesProps {
  /**
   * name
   */
  readonly name: string | any;
  /**
   * The properties of File services in storage account.
   */
  readonly properties?: any;
}

/**
 * Properties for Microsoft.Storage/storageAccounts/fileServices/shares (L1 construct).
 *
 * @remarks
 * Microsoft.Storage/storageAccounts/fileServices/shares
 *
 * **ARM Resource Type**: `Microsoft.Storage/storageAccounts/fileServices/shares`
 * **API Version**: `2025-01-01`
 *
 * Direct mapping to ARM resource properties with no defaults or transformations.
 */
export interface ArmStorageAccountsFileServicesSharesProps {
  /**
   * The name of the file share within the specified storage account. File share names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
   *
   * @remarks
   * Length: 3-63 characters
   */
  readonly name: string;
  /**
   * Properties of the file share.
   */
  readonly properties?: FileShareProps | any;
}

/**
 * Properties for Microsoft.Storage/storageAccounts/inventoryPolicies (L1 construct).
 *
 * @remarks
 * Microsoft.Storage/storageAccounts/inventoryPolicies
 *
 * **ARM Resource Type**: `Microsoft.Storage/storageAccounts/inventoryPolicies`
 * **API Version**: `2025-01-01`
 *
 * Direct mapping to ARM resource properties with no defaults or transformations.
 */
export interface ArmStorageAccountsInventoryPoliciesProps {
  /**
   * The name of the storage account blob inventory policy. It should always be 'default'
   */
  readonly name: string | any;
  /**
   * Returns the storage account blob inventory policy rules.
   */
  readonly properties?: BlobInventoryPolicyProps | any;
}

/**
 * Properties for Microsoft.Storage/storageAccounts/localUsers (L1 construct).
 *
 * @remarks
 * Microsoft.Storage/storageAccounts/localUsers
 *
 * **ARM Resource Type**: `Microsoft.Storage/storageAccounts/localUsers`
 * **API Version**: `2025-01-01`
 *
 * Direct mapping to ARM resource properties with no defaults or transformations.
 */
export interface ArmStorageAccountsLocalUsersProps {
  /**
   * The name of local user. The username must contain lowercase letters and numbers only. It must be unique only within the storage account.
   *
   * @remarks
   * Length: 3-64 characters
   */
  readonly name: string;
  /**
   * Storage account local user properties.
   */
  readonly properties?: LocalUserProps | any;
}

/**
 * Properties for Microsoft.Storage/storageAccounts/managementPolicies (L1 construct).
 *
 * @remarks
 * Microsoft.Storage/storageAccounts/managementPolicies
 *
 * **ARM Resource Type**: `Microsoft.Storage/storageAccounts/managementPolicies`
 * **API Version**: `2025-01-01`
 *
 * Direct mapping to ARM resource properties with no defaults or transformations.
 */
export interface ArmStorageAccountsManagementPoliciesProps {
  /**
   * The name of the Storage Account Management Policy. It should always be 'default'
   */
  readonly name: string | any;
  /**
   * Returns the Storage Account Data Policies Rules.
   */
  readonly properties?: ManagementPolicyProps | any;
}

/**
 * Properties for Microsoft.Storage/storageAccounts/objectReplicationPolicies (L1 construct).
 *
 * @remarks
 * Microsoft.Storage/storageAccounts/objectReplicationPolicies
 *
 * **ARM Resource Type**: `Microsoft.Storage/storageAccounts/objectReplicationPolicies`
 * **API Version**: `2025-01-01`
 *
 * Direct mapping to ARM resource properties with no defaults or transformations.
 */
export interface ArmStorageAccountsObjectReplicationPoliciesProps {
  /**
   * For the destination account, provide the value 'default'. Configure the policy on the destination account first. For the source account, provide the value of the policy ID that is returned when you download the policy that was defined on the destination account. The policy is downloaded as a JSON file.
   *
   * @remarks
   * Length: 1-unlimited characters
   */
  readonly name: string;
  /**
   * Returns the Storage Account Object Replication Policy.
   */
  readonly properties?: ObjectReplicationPolicyProps | any;
}

/**
 * Properties for Microsoft.Storage/storageAccounts/privateEndpointConnections (L1 construct).
 *
 * @remarks
 * Microsoft.Storage/storageAccounts/privateEndpointConnections
 *
 * **ARM Resource Type**: `Microsoft.Storage/storageAccounts/privateEndpointConnections`
 * **API Version**: `2025-01-01`
 *
 * Direct mapping to ARM resource properties with no defaults or transformations.
 */
export interface ArmStorageAccountsPrivateEndpointConnectionsProps {
  /**
   * The name of the private endpoint connection associated with the Azure resource
   */
  readonly name: string;
  /**
   * Resource properties.
   */
  readonly properties?: PrivateEndpointConnectionProps | any;
}

/**
 * Properties for Microsoft.Storage/storageAccounts/queueServices (L1 construct).
 *
 * @remarks
 * Microsoft.Storage/storageAccounts/queueServices
 *
 * **ARM Resource Type**: `Microsoft.Storage/storageAccounts/queueServices`
 * **API Version**: `2025-01-01`
 *
 * Direct mapping to ARM resource properties with no defaults or transformations.
 */
export interface ArmStorageAccountsQueueServicesProps {
  /**
   * name
   */
  readonly name: string | any;
  /**
   * The properties of a storage account's Queue service.
   */
  readonly properties?: QueueServicePropertiesProps | any;
}

/**
 * Properties for Microsoft.Storage/storageAccounts/queueServices/queues (L1 construct).
 *
 * @remarks
 * Microsoft.Storage/storageAccounts/queueServices/queues
 *
 * **ARM Resource Type**: `Microsoft.Storage/storageAccounts/queueServices/queues`
 * **API Version**: `2025-01-01`
 *
 * Direct mapping to ARM resource properties with no defaults or transformations.
 */
export interface ArmStorageAccountsQueueServicesQueuesProps {
  /**
   * A queue name must be unique within a storage account and must be between 3 and 63 characters.The name must comprise of lowercase alphanumeric and dash(-) characters only, it should begin and end with an alphanumeric character and it cannot have two consecutive dash(-) characters.
   */
  readonly name: string | any;
  /**
   * Queue resource properties.
   */
  readonly properties?: QueueProps | any;
}

/**
 * Properties for Microsoft.Storage/storageAccounts/storageTaskAssignments (L1 construct).
 *
 * @remarks
 * Microsoft.Storage/storageAccounts/storageTaskAssignments
 *
 * **ARM Resource Type**: `Microsoft.Storage/storageAccounts/storageTaskAssignments`
 * **API Version**: `2025-01-01`
 *
 * Direct mapping to ARM resource properties with no defaults or transformations.
 */
export interface ArmStorageAccountsStorageTaskAssignmentsProps {
  /**
   * The name of the storage task assignment within the specified resource group. Storage task assignment names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
   */
  readonly name: string | any;
  /**
   * Properties of the storage task assignment.
   */
  readonly properties?: StorageTaskAssignmentProps | any;
}

/**
 * Properties for Microsoft.Storage/storageAccounts/tableServices (L1 construct).
 *
 * @remarks
 * Microsoft.Storage/storageAccounts/tableServices
 *
 * **ARM Resource Type**: `Microsoft.Storage/storageAccounts/tableServices`
 * **API Version**: `2025-01-01`
 *
 * Direct mapping to ARM resource properties with no defaults or transformations.
 */
export interface ArmStorageAccountsTableServicesProps {
  /**
   * name
   */
  readonly name: string | any;
  /**
   * The properties of a storage account's Table service.
   */
  readonly properties?: TableServicePropertiesProps | any;
}

/**
 * Properties for Microsoft.Storage/storageAccounts/tableServices/tables (L1 construct).
 *
 * @remarks
 * Microsoft.Storage/storageAccounts/tableServices/tables
 *
 * **ARM Resource Type**: `Microsoft.Storage/storageAccounts/tableServices/tables`
 * **API Version**: `2025-01-01`
 *
 * Direct mapping to ARM resource properties with no defaults or transformations.
 */
export interface ArmStorageAccountsTableServicesTablesProps {
  /**
   * A table name must be unique within a storage account and must be between 3 and 63 characters.The name must comprise of only alphanumeric characters and it cannot begin with a numeric character.
   */
  readonly name: string | any;
  /**
   * Table resource properties.
   */
  readonly properties?: any;
}
