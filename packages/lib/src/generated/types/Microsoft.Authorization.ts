/**
 * Type definitions for Microsoft.Authorization resources.
 *
 * **API Version**: 2022-04-01
 * **Generated**: 2025-10-13T00:00:00.000Z
 * **Source**: Microsoft.Authorization Azure ARM Schema
 *
 * @remarks
 * This file is auto-generated. Do not edit manually.
 * Generated by Felix (Schema & Validation Engineer)
 *
 * @packageDocumentation
 */

/**
 * Role assignment properties.
 *
 * @remarks
 * Properties for creating a role assignment at subscription, resource group, or resource level.
 */
export interface RoleAssignmentProps {
  /**
   * The role definition ID to assign.
   *
   * Constraints:
   * - Must be a valid Azure role definition resource ID
   * - Format: /subscriptions/{subscriptionId}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId}
   *
   * @example '/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7'
   */
  readonly roleDefinitionId: string;

  /**
   * The principal ID to assign the role to.
   *
   * Constraints:
   * - Must be a valid Azure AD object ID (GUID format)
   * - Can be a user, group, service principal, or managed identity
   *
   * @example '00000000-0000-0000-0000-000000000000'
   */
  readonly principalId: string;

  /**
   * The principal type of the assigned principal.
   *
   * Available values:
   * - User: Azure AD user
   * - Group: Azure AD group
   * - ServicePrincipal: Service principal
   * - ForeignGroup: Foreign group (external directory)
   */
  readonly principalType?: 'User' | 'Group' | 'ServicePrincipal' | 'ForeignGroup' | any;

  /**
   * The scope at which the role assignment applies.
   *
   * Constraints:
   * - Must be a valid Azure resource ID
   * - Can be subscription, resource group, or resource scope
   *
   * @example '/subscriptions/00000000-0000-0000-0000-000000000000'
   * @example '/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup'
   */
  readonly scope?: string;

  /**
   * The delegated managed identity resource ID.
   *
   * @remarks
   * Used for delegated scenarios where the role assignment is made on behalf of a managed identity.
   */
  readonly delegatedManagedIdentityResourceId?: string;

  /**
   * Description of the role assignment.
   *
   * Constraints:
   * - Maximum length: 512 characters
   */
  readonly description?: string;

  /**
   * The conditions under which the role assignment is active.
   *
   * @remarks
   * Uses Azure ABAC (Attribute-Based Access Control) condition format.
   * Available for certain roles and resource types.
   *
   * @example '@Resource[Microsoft.Storage/storageAccounts/blobServices/containers:name] StringEquals "private-data"'
   */
  readonly condition?: string;

  /**
   * The condition version.
   *
   * @remarks
   * Specifies the version of the condition syntax.
   * Required if condition is specified.
   *
   * @example '2.0'
   */
  readonly conditionVersion?: '2.0' | any;
}

/**
 * Policy assignment properties.
 *
 * @remarks
 * Properties for creating an Azure Policy assignment at subscription or resource group scope.
 */
export interface PolicyAssignmentProps {
  /**
   * The display name of the policy assignment.
   *
   * Constraints:
   * - Maximum length: 128 characters
   *
   * @example 'Require tag on resources'
   */
  readonly displayName?: string;

  /**
   * The policy definition ID to assign.
   *
   * Constraints:
   * - Must be a valid policy definition or policy set definition resource ID
   *
   * @example '/providers/Microsoft.Authorization/policyDefinitions/1e30110a-5ceb-460c-a204-c1c3969c6d62'
   */
  readonly policyDefinitionId: string;

  /**
   * The scope at which the policy assignment applies.
   *
   * Constraints:
   * - Must be a valid Azure resource scope
   *
   * @example '/subscriptions/00000000-0000-0000-0000-000000000000'
   */
  readonly scope?: string;

  /**
   * The scopes to exclude from the policy assignment.
   *
   * @remarks
   * Array of resource IDs that should be excluded from this policy assignment.
   */
  readonly notScopes?: string[] | any;

  /**
   * The policy assignment parameters.
   *
   * @remarks
   * Key-value pairs matching the parameter definitions in the assigned policy.
   * Each parameter value must match its defined type in the policy definition.
   */
  readonly parameters?: Record<string, PolicyParameterValue> | any;

  /**
   * Description of the policy assignment.
   *
   * Constraints:
   * - Maximum length: 512 characters
   */
  readonly description?: string;

  /**
   * The policy assignment metadata.
   *
   * @remarks
   * Arbitrary metadata to associate with the policy assignment.
   * Commonly used for categorization and reporting.
   */
  readonly metadata?: Record<string, any> | any;

  /**
   * The policy enforcement mode.
   *
   * Available values:
   * - Default: Policy is actively enforced (non-compliant operations blocked)
   * - DoNotEnforce: Policy is not enforced, but compliance is still evaluated
   */
  readonly enforcementMode?: 'Default' | 'DoNotEnforce' | any;

  /**
   * The managed identity associated with the policy assignment.
   *
   * @remarks
   * Required for policies with deployIfNotExists or modify effects.
   */
  readonly identity?: PolicyAssignmentIdentity | any;

  /**
   * The location for the policy assignment identity.
   *
   * @remarks
   * Required when identity is specified.
   * Must be a valid Azure region.
   *
   * @example 'eastus'
   */
  readonly location?: string;

  /**
   * The resource selector to filter which resources are evaluated.
   *
   * @remarks
   * Allows targeting specific resources within the assignment scope.
   */
  readonly resourceSelectors?: ResourceSelector[] | any;

  /**
   * The policy assignment overrides.
   *
   * @remarks
   * Allows overriding specific policy rules within a policy set.
   */
  readonly overrides?: PolicyOverride[] | any;
}

/**
 * Policy parameter value.
 *
 * @remarks
 * Wrapper for a policy parameter value with optional metadata.
 */
export interface PolicyParameterValue {
  /**
   * The parameter value.
   *
   * @remarks
   * Type must match the parameter definition in the policy.
   * Can be string, number, boolean, array, or object.
   */
  readonly value?: any;
}

/**
 * Policy assignment identity.
 *
 * @remarks
 * Managed identity configuration for policy assignments.
 */
export interface PolicyAssignmentIdentity {
  /**
   * The identity type.
   *
   * Available values:
   * - SystemAssigned: System-assigned managed identity
   * - UserAssigned: User-assigned managed identity
   * - None: No identity
   */
  readonly type?: 'SystemAssigned' | 'UserAssigned' | 'None' | any;

  /**
   * The user-assigned managed identities.
   *
   * @remarks
   * Required when type is UserAssigned.
   * Key is the resource ID of the user-assigned identity.
   */
  readonly userAssignedIdentities?: Record<string, UserAssignedIdentity> | any;
}

/**
 * User-assigned identity.
 */
export interface UserAssignedIdentity {
  /**
   * The client ID of the user-assigned identity.
   */
  readonly clientId?: string;

  /**
   * The principal ID of the user-assigned identity.
   */
  readonly principalId?: string;
}

/**
 * Resource selector.
 *
 * @remarks
 * Filters resources within a policy assignment scope.
 */
export interface ResourceSelector {
  /**
   * The name of the resource selector.
   *
   * Constraints:
   * - Maximum length: 128 characters
   */
  readonly name?: string;

  /**
   * The resource selector expressions.
   *
   * @remarks
   * Array of conditions that resources must match to be selected.
   */
  readonly selectors?: SelectorExpression[] | any;
}

/**
 * Selector expression.
 */
export interface SelectorExpression {
  /**
   * The selector kind.
   *
   * Available values:
   * - resourceLocation: Filter by resource location
   * - resourceType: Filter by resource type
   * - resourceWithoutLocation: Resources without location
   */
  readonly kind?: 'resourceLocation' | 'resourceType' | 'resourceWithoutLocation' | any;

  /**
   * The values to match.
   *
   * @remarks
   * Array of values for the selector condition.
   */
  readonly in?: string[] | any;

  /**
   * The values to exclude.
   *
   * @remarks
   * Array of values to exclude from the selector condition.
   */
  readonly notIn?: string[] | any;
}

/**
 * Policy override.
 *
 * @remarks
 * Overrides specific policy rules within a policy set assignment.
 */
export interface PolicyOverride {
  /**
   * The override kind.
   *
   * Available values:
   * - policyEffect: Override the effect of a policy rule
   */
  readonly kind?: 'policyEffect' | any;

  /**
   * The new effect value.
   *
   * Available values:
   * - audit: Log non-compliance
   * - deny: Block non-compliant operations
   * - disabled: Disable the policy rule
   */
  readonly value?: string;

  /**
   * The policy rule selectors to override.
   *
   * @remarks
   * Identifies which policy rules within the set to override.
   */
  readonly selectors?: OverrideSelector[] | any;
}

/**
 * Override selector.
 */
export interface OverrideSelector {
  /**
   * The selector kind.
   *
   * Available values:
   * - policyDefinitionReferenceId: Select by policy definition reference ID
   */
  readonly kind?: 'policyDefinitionReferenceId' | any;

  /**
   * The values to match.
   */
  readonly in?: string[] | any;
}

/**
 * Resource lock properties.
 *
 * @remarks
 * Properties for creating a management lock on a resource, resource group, or subscription.
 */
export interface LockProps {
  /**
   * The lock level.
   *
   * Constraints:
   * - Required field
   *
   * Available values:
   * - CanNotDelete: Authorized users can read and modify, but not delete
   * - ReadOnly: Authorized users can only read from the resource
   */
  readonly level: 'CanNotDelete' | 'ReadOnly' | any;

  /**
   * Notes about the lock.
   *
   * Constraints:
   * - Maximum length: 512 characters
   *
   * @example 'Prevent accidental deletion of production resources'
   */
  readonly notes?: string;

  /**
   * The owners of the lock.
   *
   * @remarks
   * Array of application IDs that own the lock.
   * Lock owners can remove the lock even when it would otherwise prevent deletion.
   */
  readonly owners?: LockOwner[] | any;
}

/**
 * Lock owner.
 */
export interface LockOwner {
  /**
   * The application ID of the lock owner.
   *
   * Constraints:
   * - Must be a valid GUID
   *
   * @example '00000000-0000-0000-0000-000000000000'
   */
  readonly applicationId?: string;
}

/**
 * Role definition properties.
 *
 * @remarks
 * Properties for creating a custom Azure role definition.
 */
export interface RoleDefinitionProps {
  /**
   * The role name.
   *
   * Constraints:
   * - Maximum length: 512 characters
   * - Must be unique within the scope
   *
   * @example 'Custom Storage Administrator'
   */
  readonly roleName: string;

  /**
   * The role description.
   *
   * Constraints:
   * - Maximum length: 1024 characters
   */
  readonly description?: string;

  /**
   * The role type.
   *
   * Available values:
   * - CustomRole: Custom role definition
   * - BuiltInRole: Built-in role definition (read-only)
   */
  readonly type?: 'CustomRole' | 'BuiltInRole' | any;

  /**
   * The assignable scopes.
   *
   * Constraints:
   * - At least one scope required
   * - Maximum 2000 scopes
   * - Must be valid Azure resource scopes
   *
   * @example ['/subscriptions/00000000-0000-0000-0000-000000000000']
   */
  readonly assignableScopes: string[] | any;

  /**
   * The role permissions.
   *
   * @remarks
   * Defines what actions and data actions are allowed or denied.
   */
  readonly permissions: RolePermission[] | any;
}

/**
 * Role permission.
 */
export interface RolePermission {
  /**
   * Allowed actions.
   *
   * @remarks
   * Array of allowed management operations.
   * Supports wildcards (e.g., 'Microsoft.Storage/*').
   *
   * @example ['Microsoft.Storage/storageAccounts/read', 'Microsoft.Storage/storageAccounts/write']
   */
  readonly actions?: string[] | any;

  /**
   * Denied actions.
   *
   * @remarks
   * Array of explicitly denied management operations.
   * Takes precedence over allowed actions.
   */
  readonly notActions?: string[] | any;

  /**
   * Allowed data actions.
   *
   * @remarks
   * Array of allowed data plane operations.
   * Supports wildcards.
   *
   * @example ['Microsoft.Storage/storageAccounts/blobServices/containers/blobs/read']
   */
  readonly dataActions?: string[] | any;

  /**
   * Denied data actions.
   *
   * @remarks
   * Array of explicitly denied data plane operations.
   * Takes precedence over allowed data actions.
   */
  readonly notDataActions?: string[] | any;
}

/**
 * Properties for Microsoft.Authorization/roleAssignments (L1 construct).
 *
 * @remarks
 * Microsoft.Authorization/roleAssignments
 *
 * **ARM Resource Type**: `Microsoft.Authorization/roleAssignments`
 * **API Version**: `2022-04-01`
 *
 * Direct mapping to ARM resource properties with no defaults or transformations.
 */
export interface ArmRoleAssignmentsProps {
  /**
   * The name of the role assignment.
   *
   * Constraints:
   * - Must be a valid GUID
   * - Typically generated using a GUID generator
   *
   * @example '00000000-0000-0000-0000-000000000000'
   */
  readonly name: string;

  /**
   * Role assignment properties.
   */
  readonly properties: RoleAssignmentProps | any;
}

/**
 * Properties for Microsoft.Authorization/policyAssignments (L1 construct).
 *
 * @remarks
 * Microsoft.Authorization/policyAssignments
 *
 * **ARM Resource Type**: `Microsoft.Authorization/policyAssignments`
 * **API Version**: `2022-06-01`
 *
 * Direct mapping to ARM resource properties with no defaults or transformations.
 */
export interface ArmPolicyAssignmentsProps {
  /**
   * The name of the policy assignment.
   *
   * Constraints:
   * - Length: 1-128 characters (for management group and subscription scope)
   * - Length: 1-260 characters (for resource group and resource scope)
   * - Pattern: Must not contain <>*%&:\?.+/
   *
   * @example 'require-tags-on-resources'
   */
  readonly name: string;

  /**
   * Policy assignment properties.
   */
  readonly properties: PolicyAssignmentProps | any;

  /**
   * The managed identity associated with the policy assignment.
   */
  readonly identity?: PolicyAssignmentIdentity | any;

  /**
   * The location for the policy assignment identity.
   *
   * @remarks
   * Required when identity is specified.
   */
  readonly location?: string;
}

/**
 * Properties for Microsoft.Authorization/locks (L1 construct).
 *
 * @remarks
 * Microsoft.Authorization/locks
 *
 * **ARM Resource Type**: `Microsoft.Authorization/locks`
 * **API Version**: `2020-05-01`
 *
 * Direct mapping to ARM resource properties with no defaults or transformations.
 */
export interface ArmLocksProps {
  /**
   * The name of the lock.
   *
   * Constraints:
   * - Length: 1-90 characters
   * - Pattern: Can only contain alphanumeric characters, periods, underscores, hyphens, and parentheses
   *
   * @example 'do-not-delete-production'
   */
  readonly name: string;

  /**
   * Lock properties.
   */
  readonly properties: LockProps | any;
}

/**
 * Properties for Microsoft.Authorization/roleDefinitions (L1 construct).
 *
 * @remarks
 * Microsoft.Authorization/roleDefinitions
 *
 * **ARM Resource Type**: `Microsoft.Authorization/roleDefinitions`
 * **API Version**: `2022-04-01`
 *
 * Direct mapping to ARM resource properties with no defaults or transformations.
 */
export interface ArmRoleDefinitionsProps {
  /**
   * The ID of the role definition.
   *
   * Constraints:
   * - Must be a valid GUID
   * - Must be unique within the scope
   *
   * @example '00000000-0000-0000-0000-000000000000'
   */
  readonly name: string;

  /**
   * Role definition properties.
   */
  readonly properties: RoleDefinitionProps | any;
}
