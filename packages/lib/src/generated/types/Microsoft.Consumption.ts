/**
 * Type definitions for Microsoft.Consumption (Azure Cost Management) resources.
 *
 * **API Version**: 2023-11-01
 * **Generated**: 2025-10-13
 * **Source**: Azure ARM Schema Microsoft.Consumption
 *
 * @remarks
 * This file is auto-generated. Do not edit manually.
 * Generated by Felix (Schema & Validation Engineer)
 *
 * @packageDocumentation
 */

/**
 * Budget category type.
 */
export type BudgetCategory = 'Cost';

/**
 * Budget time grain.
 *
 * @remarks
 * Specifies the time period for budget evaluation:
 * - Monthly: Budget resets monthly
 * - Quarterly: Budget resets quarterly
 * - Annually: Budget resets annually
 * - BillingMonth: Aligned with billing month
 * - BillingQuarter: Aligned with billing quarter
 * - BillingAnnual: Aligned with billing year
 */
export type BudgetTimeGrain =
  | 'Annually'
  | 'Monthly'
  | 'Quarterly'
  | 'BillingMonth'
  | 'BillingQuarter'
  | 'BillingAnnual';

/**
 * Notification threshold operator.
 *
 * @remarks
 * Comparison operator for budget threshold:
 * - EqualTo: Trigger when spending equals threshold
 * - GreaterThan: Trigger when spending exceeds threshold
 * - GreaterThanOrEqualTo: Trigger when spending meets or exceeds threshold
 */
export type NotificationOperator = 'EqualTo' | 'GreaterThan' | 'GreaterThanOrEqualTo';

/**
 * Notification threshold type.
 *
 * @remarks
 * Type of spending to evaluate:
 * - Actual: Based on actual spending
 * - Forecasted: Based on forecasted spending
 */
export type ThresholdType = 'Actual' | 'Forecasted';

/**
 * Budget notification locale.
 *
 * @remarks
 * Language for notification emails.
 */
export type NotificationLocale =
  | 'en-us'
  | 'ja-jp'
  | 'zh-cn'
  | 'de-de'
  | 'es-es'
  | 'fr-fr'
  | 'it-it'
  | 'ko-kr'
  | 'pt-br'
  | 'ru-ru'
  | 'zh-tw'
  | 'cs-cz'
  | 'pl-pl'
  | 'tr-tr'
  | 'da-dk'
  | 'en-gb'
  | 'hu-hu'
  | 'nb-no'
  | 'nl-nl'
  | 'pt-pt'
  | 'sv-se';

/**
 * Time period for the budget.
 */
export interface BudgetTimePeriod {
  /**
   * Start date for the budget period.
   *
   * @remarks
   * Start date in ISO 8601 format (YYYY-MM-DD).
   * The budget will start tracking from this date.
   *
   * **Constraints**:
   * - Must be in the future or current month
   * - Format: YYYY-MM-DD
   *
   * @example '2024-01-01'
   */
  readonly startDate: string;

  /**
   * End date for the budget period.
   *
   * @remarks
   * End date in ISO 8601 format (YYYY-MM-DD).
   * If not specified, defaults to 10 years from start date.
   *
   * **Constraints**:
   * - Must be after start date
   * - Format: YYYY-MM-DD
   *
   * @example '2024-12-31'
   */
  readonly endDate?: string;
}

/**
 * Budget filter dimension.
 */
export interface BudgetFilterDimension {
  /**
   * Dimension name.
   *
   * @remarks
   * Name of the dimension to filter by.
   * Common dimensions:
   * - ResourceGroupName
   * - ResourceId
   * - ResourceType
   * - MeterCategory
   * - MeterSubCategory
   * - Meter
   *
   * @example 'ResourceGroupName'
   */
  readonly name: string;

  /**
   * Dimension values.
   *
   * @remarks
   * List of values to filter by for this dimension.
   *
   * @example ['rg-production', 'rg-staging']
   */
  readonly values: string[];

  /**
   * Logical operator.
   *
   * @remarks
   * Operator for combining dimension values:
   * - In: Match any of the specified values
   *
   * @example 'In'
   */
  readonly operator?: 'In';
}

/**
 * Budget filter tag.
 */
export interface BudgetFilterTag {
  /**
   * Tag name.
   *
   * @remarks
   * Name of the tag to filter by.
   *
   * @example 'Environment'
   */
  readonly name: string;

  /**
   * Tag values.
   *
   * @remarks
   * List of tag values to filter by.
   *
   * @example ['Production', 'Staging']
   */
  readonly values: string[];

  /**
   * Logical operator.
   *
   * @remarks
   * Operator for combining tag values:
   * - In: Match any of the specified values
   *
   * @example 'In'
   */
  readonly operator?: 'In';
}

/**
 * Budget filter properties.
 */
export interface BudgetFilterProperties {
  /**
   * Dimension filters.
   *
   * @remarks
   * Filter budget by resource dimensions.
   * Multiple dimensions are combined with AND logic.
   */
  readonly dimensions?: BudgetFilterDimension;

  /**
   * Tag filters.
   *
   * @remarks
   * Filter budget by resource tags.
   * Multiple tags are combined with AND logic.
   */
  readonly tags?: BudgetFilterTag;
}

/**
 * Budget filter configuration.
 *
 * @remarks
 * Filters to apply to the budget. Use to limit the budget
 * to specific resources, resource groups, or tags.
 */
export interface BudgetFilter {
  /**
   * Logical AND conditions.
   *
   * @remarks
   * Multiple filter conditions combined with AND logic.
   * All conditions must be satisfied for a resource to be included.
   */
  readonly and?: BudgetFilterProperties[];

  /**
   * Dimension filter.
   *
   * @remarks
   * Filter by a single dimension.
   */
  readonly dimensions?: BudgetFilterDimension;

  /**
   * Tag filter.
   *
   * @remarks
   * Filter by a single tag.
   */
  readonly tags?: BudgetFilterTag;
}

/**
 * Budget notification configuration.
 *
 * @remarks
 * Defines when and how notifications are sent when budget thresholds are reached.
 */
export interface BudgetNotification {
  /**
   * Enable notification.
   *
   * @remarks
   * If true, notifications will be sent when the threshold is reached.
   */
  readonly enabled: boolean;

  /**
   * Notification threshold.
   *
   * @remarks
   * Percentage of budget amount that triggers notification.
   *
   * **Constraints**:
   * - Range: 0-1000
   * - Represents percentage (e.g., 80 = 80% of budget)
   *
   * @example 80
   */
  readonly threshold: number;

  /**
   * Threshold comparison operator.
   *
   * @remarks
   * Operator used to compare actual/forecasted spending to threshold:
   * - GreaterThan: Notify when spending exceeds threshold (most common)
   * - GreaterThanOrEqualTo: Notify when spending meets or exceeds threshold
   * - EqualTo: Notify when spending equals threshold exactly
   */
  readonly operator: NotificationOperator;

  /**
   * Threshold type.
   *
   * @remarks
   * Type of spending to evaluate:
   * - Actual: Based on actual spending (default)
   * - Forecasted: Based on projected spending
   *
   * @example 'Actual'
   */
  readonly thresholdType?: ThresholdType;

  /**
   * Contact email addresses.
   *
   * @remarks
   * List of email addresses to notify when threshold is reached.
   *
   * **Constraints**:
   * - At least one contact method (email, role, or group) is required
   * - Maximum 50 email addresses
   *
   * @example ['admin@contoso.com', 'finance@contoso.com']
   */
  readonly contactEmails: string[];

  /**
   * Contact roles.
   *
   * @remarks
   * List of Azure RBAC roles to notify.
   * Common roles:
   * - Owner
   * - Contributor
   * - Reader
   * - Cost Management Contributor
   *
   * @example ['Owner', 'Contributor']
   */
  readonly contactRoles?: string[];

  /**
   * Contact action groups.
   *
   * @remarks
   * List of Azure Monitor Action Group resource IDs to trigger.
   * Allows integration with Azure Monitor for advanced notification scenarios.
   *
   * @example ['/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/actionGroups/{actionGroupName}']
   */
  readonly contactGroups?: string[];

  /**
   * Notification locale.
   *
   * @remarks
   * Language for notification emails.
   * Defaults to 'en-us' if not specified.
   *
   * @example 'en-us'
   */
  readonly locale?: NotificationLocale;
}

/**
 * Budget properties.
 */
export interface BudgetProperties {
  /**
   * Budget amount.
   *
   * @remarks
   * The total amount of cost or usage to track in the budget.
   * For Cost budgets, this is in the currency of the subscription.
   *
   * **Constraints**:
   * - Must be a positive integer
   * - Represents the monetary amount for the entire time period
   *
   * @example 10000
   */
  readonly amount: number;

  /**
   * Budget category.
   *
   * @remarks
   * Category determines what the budget tracks:
   * - Cost: Tracks monetary cost (most common)
   *
   * Currently only 'Cost' is supported.
   */
  readonly category: BudgetCategory;

  /**
   * Time grain for budget evaluation.
   *
   * @remarks
   * Frequency at which the budget resets:
   * - Monthly: Most common for operational budgets
   * - Quarterly: Good for quarterly planning cycles
   * - Annually: For annual budget planning
   * - BillingMonth/Quarter/Annual: Aligned with billing cycles
   */
  readonly timeGrain: BudgetTimeGrain;

  /**
   * Time period for the budget.
   *
   * @remarks
   * Defines the start and end dates for budget tracking.
   */
  readonly timePeriod: BudgetTimePeriod;

  /**
   * Budget filter.
   *
   * @remarks
   * Optional filters to limit budget scope to specific resources, tags, etc.
   * If not specified, budget applies to all resources in the scope.
   */
  readonly filter?: BudgetFilter;

  /**
   * Budget notifications.
   *
   * @remarks
   * Dictionary of notifications keyed by notification name.
   * Each notification can have different thresholds and contact lists.
   *
   * **Best Practice**:
   * - Configure multiple thresholds (e.g., 50%, 80%, 100%)
   * - Use descriptive names (e.g., "Alert50Percent", "Alert80Percent")
   *
   * @example
   * ```typescript
   * {
   *   'Alert50Percent': {
   *     enabled: true,
   *     threshold: 50,
   *     operator: 'GreaterThan',
   *     contactEmails: ['admin@contoso.com']
   *   },
   *   'Alert100Percent': {
   *     enabled: true,
   *     threshold: 100,
   *     operator: 'GreaterThanOrEqualTo',
   *     contactEmails: ['admin@contoso.com', 'finance@contoso.com']
   *   }
   * }
   * ```
   */
  readonly notifications?: Record<string, BudgetNotification>;

  /**
   * Current spending (output only).
   *
   * @remarks
   * Current actual spending against the budget. Populated by Azure.
   */
  readonly currentSpend?: {
    readonly amount?: number;
    readonly unit?: string;
  };

  /**
   * Forecasted spending (output only).
   *
   * @remarks
   * Forecasted spending for the budget period. Populated by Azure.
   */
  readonly forecastSpend?: Array<{
    readonly amount?: number;
    readonly unit?: string;
  }>;
}

/**
 * Properties for Microsoft.Consumption/budgets (L1 construct).
 *
 * @remarks
 * Microsoft.Consumption/budgets - Azure Budget
 *
 * **ARM Resource Type**: `Microsoft.Consumption/budgets`
 * **API Version**: `2023-11-01`
 *
 * Direct mapping to ARM resource properties with no defaults or transformations.
 *
 * **Budget Name Constraints**:
 * - Budget names are unique within their scope
 * - Recommended: Use descriptive names that indicate purpose and period
 *
 * **Scope**:
 * Budgets can be created at different scopes:
 * - Subscription: /subscriptions/{subscriptionId}
 * - Resource Group: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}
 * - Management Group: /providers/Microsoft.Management/managementGroups/{managementGroupId}
 * - Billing Account: /providers/Microsoft.Billing/billingAccounts/{billingAccountId}
 *
 * @example
 * ```typescript
 * const budgetProps: ArmBudgetProps = {
 *   name: 'MonthlyBudget',
 *   properties: {
 *     amount: 10000,
 *     category: 'Cost',
 *     timeGrain: 'Monthly',
 *     timePeriod: {
 *       startDate: '2024-01-01',
 *       endDate: '2024-12-31'
 *     },
 *     notifications: {
 *       'Alert80Percent': {
 *         enabled: true,
 *         threshold: 80,
 *         operator: 'GreaterThan',
 *         thresholdType: 'Actual',
 *         contactEmails: ['admin@contoso.com']
 *       },
 *       'Alert100Percent': {
 *         enabled: true,
 *         threshold: 100,
 *         operator: 'GreaterThanOrEqualTo',
 *         thresholdType: 'Actual',
 *         contactEmails: ['admin@contoso.com', 'finance@contoso.com']
 *       }
 *     }
 *   }
 * };
 * ```
 */
export interface ArmBudgetProps {
  /**
   * Budget name.
   *
   * @remarks
   * The name of the budget. Must be unique within the scope.
   *
   * **Best Practice**:
   * Use descriptive names that indicate:
   * - Purpose (e.g., "Production", "Development")
   * - Time period if relevant (e.g., "FY2024")
   * - Scope if not obvious (e.g., "RG-WebApp")
   *
   * @example 'MonthlyProductionBudget'
   */
  readonly name: string;

  /**
   * Budget properties.
   *
   * @remarks
   * Configuration for the budget including amount, time period, and notifications.
   */
  readonly properties: BudgetProperties;

  /**
   * ETag for optimistic concurrency control.
   *
   * @remarks
   * ETag used for concurrent update detection.
   * Azure will reject updates if the ETag doesn't match the current value.
   */
  readonly eTag?: string;
}
