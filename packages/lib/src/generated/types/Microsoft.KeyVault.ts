/**
 * Type definitions for Microsoft.KeyVault resources.
 *
 * **API Version**: 2024-12-01-preview
 * **Generated**: 2025-10-04T02:16:57.750Z
 * **Source**: Microsoft.KeyVault.json
 *
 * @remarks
 * This file is auto-generated. Do not edit manually.
 * Generated by Felix (Schema & Validation Engineer)
 *
 * @packageDocumentation
 */

/**
 * AccessPolicyEntry definition.
 */
export interface AccessPolicyEntry {
  /**
   *  Application ID of the client making request on behalf of a principal
   */
  readonly applicationId?: string | any;
  /**
   * The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies.
   */
  readonly objectId?: string;
  /**
   * Permissions the identity has for keys, secrets and certificates.
   */
  readonly permissions?: Permissions | any;
  /**
   * The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
   */
  readonly tenantId?: string | any;
}

/**
 * Action definition.
 */
export interface Action {
}

/**
 * IPRule definition.
 */
export interface IPRule {
  /**
   * An IPv4 address range in CIDR notation, such as '124.56.78.91' (simple IP address) or '124.56.78.0/24' (all addresses that start with 124.56.78).
   */
  readonly value?: string;
}

/**
 * KeyAttributes definition.
 */
export interface KeyAttributes {
  /**
   * Determines whether or not the object is enabled.
   */
  readonly enabled?: boolean | any;
  /**
   * Expiry date in seconds since 1970-01-01T00:00:00Z.
   */
  readonly exp?: number | any;
  /**
   * Indicates if the private key can be exported.
   */
  readonly exportable?: boolean | any;
  /**
   * Not before date in seconds since 1970-01-01T00:00:00Z.
   */
  readonly nbf?: number | any;
}

/**
 * KeyProps definition.
 */
export interface KeyProps {
  /**
   * The attributes of the key.
   */
  readonly attributes?: KeyAttributes | any;
  /**
   * The elliptic curve name. For valid values, see JsonWebKeyCurveName. Default for EC and EC-HSM keys is P-256
   */
  readonly curveName?: 'P-256' | 'P-384' | 'P-521' | 'P-256K' | any;
  /**
   * Array of JsonWebKeyOperation
   */
  readonly keyOps?: 'encrypt' | 'decrypt' | 'sign' | 'verify' | 'wrapKey' | 'unwrapKey' | 'import' | 'release'[] | any;
  /**
   * The key size in bits. For example: 2048, 3072, or 4096 for RSA. Default for RSA and RSA-HSM keys is 2048. Exception made for bring your own key (BYOK), key exchange keys default to 4096.
   */
  readonly keySize?: number | any;
  /**
   * The type of the key. For valid values, see JsonWebKeyType.
   */
  readonly kty?: 'EC' | 'EC-HSM' | 'RSA' | 'RSA-HSM' | any;
  /**
   * Key release policy in response. It will be used for both output and input. Omitted if empty
   */
  readonly release_policy?: KeyReleasePolicy | any;
  /**
   * Key rotation policy in response. It will be used for both output and input. Omitted if empty
   */
  readonly rotationPolicy?: RotationPolicy | any;
}

/**
 * KeyReleasePolicy definition.
 */
export interface KeyReleasePolicy {
  /**
   * Content type and version of key release policy
   */
  readonly contentType?: string;
  /**
   * Blob encoding the policy rules under which the key can be released.
   */
  readonly data?: string;
}

/**
 * KeyRotationPolicyAttributes definition.
 */
export interface KeyRotationPolicyAttributes {
  /**
   * The expiration time for the new key version. It should be in ISO8601 format. Eg: 'P90D', 'P1Y'.
   */
  readonly expiryTime?: string;
}

/**
 * LifetimeAction definition.
 */
export interface LifetimeAction {
  /**
   * The action of key rotation policy lifetimeAction.
   */
  readonly action?: Action | any;
  /**
   * The trigger of key rotation policy lifetimeAction.
   */
  readonly trigger?: Trigger | any;
}

/**
 * ManagedHsmAction definition.
 */
export interface ManagedHsmAction {
}

/**
 * ManagedHsmKeyAttributes definition.
 */
export interface ManagedHsmKeyAttributes {
  /**
   * Determines whether or not the object is enabled.
   */
  readonly enabled?: boolean | any;
  /**
   * Expiry date in seconds since 1970-01-01T00:00:00Z.
   */
  readonly exp?: number | any;
  /**
   * Indicates if the private key can be exported.
   */
  readonly exportable?: boolean | any;
  /**
   * Not before date in seconds since 1970-01-01T00:00:00Z.
   */
  readonly nbf?: number | any;
}

/**
 * ManagedHsmKeyProps definition.
 */
export interface ManagedHsmKeyProps {
  /**
   * The attributes of the key.
   */
  readonly attributes?: ManagedHsmKeyAttributes | any;
  /**
   * The elliptic curve name. For valid values, see JsonWebKeyCurveName. Default for EC and EC-HSM keys is P-256
   */
  readonly curveName?: 'P-256' | 'P-384' | 'P-521' | 'P-256K' | any;
  /**
   * Array of JsonWebKeyOperation
   */
  readonly keyOps?: 'encrypt' | 'decrypt' | 'sign' | 'verify' | 'wrapKey' | 'unwrapKey' | 'import' | 'release'[] | any;
  /**
   * The key size in bits. For example: 2048, 3072, or 4096 for RSA. Default for RSA and RSA-HSM keys is 2048. Exception made for bring your own key (BYOK), key exchange keys default to 4096.
   */
  readonly keySize?: number | any;
  /**
   * The type of the key. For valid values, see JsonWebKeyType.
   */
  readonly kty?: 'EC' | 'EC-HSM' | 'RSA' | 'RSA-HSM' | any;
  /**
   * Key release policy in response. It will be used for both output and input. Omitted if empty
   */
  readonly release_policy?: ManagedHsmKeyReleasePolicy | any;
  /**
   * Key rotation policy in response. It will be used for both output and input. Omitted if empty
   */
  readonly rotationPolicy?: ManagedHsmRotationPolicy | any;
}

/**
 * ManagedHsmKeyReleasePolicy definition.
 */
export interface ManagedHsmKeyReleasePolicy {
  /**
   * Content type and version of key release policy
   */
  readonly contentType?: string;
  /**
   * Blob encoding the policy rules under which the key can be released.
   */
  readonly data?: string;
}

/**
 * ManagedHsmKeyRotationPolicyAttributes definition.
 */
export interface ManagedHsmKeyRotationPolicyAttributes {
  /**
   * The expiration time for the new key version. It should be in ISO8601 format. Eg: 'P90D', 'P1Y'.
   */
  readonly expiryTime?: string;
}

/**
 * ManagedHsmLifetimeAction definition.
 */
export interface ManagedHsmLifetimeAction {
  /**
   * The action of key rotation policy lifetimeAction.
   */
  readonly action?: ManagedHsmAction | any;
  /**
   * The trigger of key rotation policy lifetimeAction.
   */
  readonly trigger?: ManagedHsmTrigger | any;
}

/**
 * ManagedHsmProps definition.
 */
export interface ManagedHsmProps {
  /**
   * The create mode to indicate whether the resource is being created or is being recovered from a deleted resource.
   */
  readonly createMode?: 'recover' | 'default' | any;
  /**
   * Property specifying whether protection against purge is enabled for this managed HSM pool. Setting this property to true activates protection against purge for this managed HSM pool and its content - only the Managed HSM service may initiate a hard, irrecoverable deletion. Enabling this functionality is irreversible.
   */
  readonly enablePurgeProtection?: boolean | any;
  /**
   * Property to specify whether the 'soft delete' functionality is enabled for this managed HSM pool. Soft delete is enabled by default for all managed HSMs and is immutable.
   */
  readonly enableSoftDelete?: boolean | any;
  /**
   * Array of initial administrators object ids for this managed hsm pool.
   */
  readonly initialAdminObjectIds?: string[] | any;
  /**
   * Rules governing the accessibility of the key vault from specific network locations.
   */
  readonly networkAcls?: MhsmNetworkRuleSet | any;
  /**
   * Control permission to the managed HSM from public networks.
   */
  readonly publicNetworkAccess?: 'Enabled' | 'Disabled' | any;
  /**
   * List of all regions associated with the managed hsm pool.
   */
  readonly regions?: MhsmGeoReplicatedRegion[] | any;
  /**
   * Soft deleted data retention days. When you delete an HSM or a key, it will remain recoverable for the configured retention period or for a default period of 90 days. It accepts values between 7 and 90.
   */
  readonly softDeleteRetentionInDays?: number | any;
  /**
   * The Azure Active Directory tenant ID that should be used for authenticating requests to the managed HSM pool.
   */
  readonly tenantId?: string | any;
}

/**
 * ManagedHsmRotationPolicy definition.
 */
export interface ManagedHsmRotationPolicy {
  /**
   * The attributes of key rotation policy.
   */
  readonly attributes?: ManagedHsmKeyRotationPolicyAttributes | any;
  /**
   * The lifetimeActions for key rotation action.
   */
  readonly lifetimeActions?: ManagedHsmLifetimeAction[] | any;
}

/**
 * ManagedHsmSku definition.
 */
export interface ManagedHsmSku {
  /**
   * SKU Family of the managed HSM Pool
   */
  readonly family?: 'B' | 'C' | any;
  /**
   * SKU of the managed HSM Pool
   */
  readonly name?: 'Standard_B1' | 'Custom_B32' | 'Custom_B6' | 'Custom_C42' | 'Custom_C10' | any;
}

/**
 * ManagedHsmTrigger definition.
 */
export interface ManagedHsmTrigger {
  /**
   * The time duration after key creation to rotate the key. It only applies to rotate. It will be in ISO 8601 duration format. Eg: 'P90D', 'P1Y'.
   */
  readonly timeAfterCreate?: string;
  /**
   * The time duration before key expiring to rotate or notify. It will be in ISO 8601 duration format. Eg: 'P90D', 'P1Y'.
   */
  readonly timeBeforeExpiry?: string;
}

/**
 * ManagedServiceIdentity definition.
 */
export interface ManagedServiceIdentity {
  /**
   * The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
   */
  readonly userAssignedIdentities?: Record<string, UserAssignedIdentity> | any;
}

/**
 * MhsmGeoReplicatedRegion definition.
 */
export interface MhsmGeoReplicatedRegion {
  /**
   * A boolean value that indicates whether the region is the primary region or a secondary region.
   */
  readonly isPrimary?: boolean | any;
  /**
   * Name of the geo replicated region.
   */
  readonly name?: string;
}

/**
 * MhsmNetworkRuleSet definition.
 */
export interface MhsmNetworkRuleSet {
  /**
   * Tells what traffic can bypass network rules. This can be 'AzureServices' or 'None'.  If not specified the default is 'AzureServices'.
   */
  readonly bypass?: 'AzureServices' | 'None' | any;
  /**
   * The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property has been evaluated.
   */
  readonly defaultAction?: 'Allow' | 'Deny' | any;
  /**
   * The list of IP address rules.
   */
  readonly ipRules?: MhsmipRule[] | any;
  /**
   * The list of virtual network rules.
   */
  readonly virtualNetworkRules?: MhsmVirtualNetworkRule[] | any;
}

/**
 * MhsmPrivateEndpoint definition.
 */
export interface MhsmPrivateEndpoint {
}

/**
 * MhsmPrivateEndpointConnectionProps definition.
 */
export interface MhsmPrivateEndpointConnectionProps {
  /**
   * Properties of the private endpoint object.
   */
  readonly privateEndpoint?: MhsmPrivateEndpoint | any;
  /**
   * Approval state of the private link connection.
   */
  readonly privateLinkServiceConnectionState?: MhsmPrivateLinkServiceConnectionState | any;
  /**
   * Provisioning state of the private endpoint connection.
   */
  readonly provisioningState?: 'Succeeded' | 'Creating' | 'Updating' | 'Deleting' | 'Failed' | 'Disconnected' | any;
}

/**
 * MhsmPrivateLinkServiceConnectionState definition.
 */
export interface MhsmPrivateLinkServiceConnectionState {
  /**
   * A message indicating if changes on the service provider require any updates on the consumer.
   */
  readonly actionsRequired?: 'None' | any;
  /**
   * The reason for approval or rejection.
   */
  readonly description?: string;
  /**
   * Indicates whether the connection has been approved, rejected or removed by the key vault owner.
   */
  readonly status?: 'Pending' | 'Approved' | 'Rejected' | 'Disconnected' | any;
}

/**
 * MhsmVirtualNetworkRule definition.
 */
export interface MhsmVirtualNetworkRule {
  /**
   * Full resource id of a vnet subnet, such as '/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1'.
   */
  readonly id?: string;
}

/**
 * MhsmipRule definition.
 */
export interface MhsmipRule {
  /**
   * An IPv4 address range in CIDR notation, such as '124.56.78.91' (simple IP address) or '124.56.78.0/24' (all addresses that start with 124.56.78).
   */
  readonly value?: string;
}

/**
 * NetworkRuleSet definition.
 */
export interface NetworkRuleSet {
  /**
   * Tells what traffic can bypass network rules. This can be 'AzureServices' or 'None'.  If not specified the default is 'AzureServices'.
   */
  readonly bypass?: 'AzureServices' | 'None' | any;
  /**
   * The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property has been evaluated.
   */
  readonly defaultAction?: 'Allow' | 'Deny' | any;
  /**
   * The list of IP address rules.
   */
  readonly ipRules?: IPRule[] | any;
  /**
   * The list of virtual network rules.
   */
  readonly virtualNetworkRules?: VirtualNetworkRule[] | any;
}

/**
 * Permissions definition.
 */
export interface Permissions {
  /**
   * Permissions to certificates
   */
  readonly certificates?: 'all' | 'get' | 'list' | 'delete' | 'create' | 'import' | 'update' | 'managecontacts' | 'getissuers' | 'listissuers' | 'setissuers' | 'deleteissuers' | 'manageissuers' | 'recover' | 'purge' | 'backup' | 'restore'[] | any;
  /**
   * Permissions to keys
   */
  readonly keys?: 'all' | 'encrypt' | 'decrypt' | 'wrapKey' | 'unwrapKey' | 'sign' | 'verify' | 'get' | 'list' | 'create' | 'update' | 'import' | 'delete' | 'backup' | 'restore' | 'recover' | 'purge' | 'release' | 'rotate' | 'getrotationpolicy' | 'setrotationpolicy'[] | any;
  /**
   * Permissions to secrets
   */
  readonly secrets?: 'all' | 'get' | 'list' | 'set' | 'delete' | 'backup' | 'restore' | 'recover' | 'purge'[] | any;
  /**
   * Permissions to storage accounts
   */
  readonly storage?: 'all' | 'get' | 'list' | 'delete' | 'set' | 'update' | 'regeneratekey' | 'recover' | 'purge' | 'backup' | 'restore' | 'setsas' | 'listsas' | 'getsas' | 'deletesas'[] | any;
}

/**
 * PrivateEndpoint definition.
 */
export interface PrivateEndpoint {
}

/**
 * PrivateEndpointConnectionProps definition.
 */
export interface PrivateEndpointConnectionProps {
  /**
   * Properties of the private endpoint object.
   */
  readonly privateEndpoint?: PrivateEndpoint | any;
  /**
   * Approval state of the private link connection.
   */
  readonly privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState | any;
  /**
   * Provisioning state of the private endpoint connection.
   */
  readonly provisioningState?: 'Succeeded' | 'Creating' | 'Updating' | 'Deleting' | 'Failed' | 'Disconnected' | any;
}

/**
 * PrivateLinkServiceConnectionState definition.
 */
export interface PrivateLinkServiceConnectionState {
  /**
   * A message indicating if changes on the service provider require any updates on the consumer.
   */
  readonly actionsRequired?: 'None' | any;
  /**
   * The reason for approval or rejection.
   */
  readonly description?: string;
  /**
   * Indicates whether the connection has been approved, rejected or removed by the key vault owner.
   */
  readonly status?: 'Pending' | 'Approved' | 'Rejected' | 'Disconnected' | any;
}

/**
 * RotationPolicy definition.
 */
export interface RotationPolicy {
  /**
   * The attributes of key rotation policy.
   */
  readonly attributes?: KeyRotationPolicyAttributes | any;
  /**
   * The lifetimeActions for key rotation action.
   */
  readonly lifetimeActions?: LifetimeAction[] | any;
}

/**
 * SecretAttributes definition.
 */
export interface SecretAttributes {
  /**
   * Determines whether the object is enabled.
   */
  readonly enabled?: boolean | any;
  /**
   * Expiry date in seconds since 1970-01-01T00:00:00Z.
   */
  readonly exp?: number | any;
  /**
   * Not before date in seconds since 1970-01-01T00:00:00Z.
   */
  readonly nbf?: number | any;
}

/**
 * SecretProps definition.
 */
export interface SecretProps {
  /**
   * The attributes of the secret.
   */
  readonly attributes?: SecretAttributes | any;
  /**
   * The content type of the secret.
   */
  readonly contentType?: string;
  /**
   * The value of the secret. NOTE: 'value' will never be returned from the service, as APIs using this model are is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets.
   */
  readonly value?: string;
}

/**
 * Sku definition.
 */
export interface Sku {
  /**
   * SKU family name
   */
  readonly family?: 'A' | any;
  /**
   * SKU name to specify whether the key vault is a standard vault or a premium vault.
   */
  readonly name?: 'standard' | 'premium' | any;
}

/**
 * Trigger definition.
 */
export interface Trigger {
  /**
   * The time duration after key creation to rotate the key. It only applies to rotate. It will be in ISO 8601 duration format. Eg: 'P90D', 'P1Y'.
   */
  readonly timeAfterCreate?: string;
  /**
   * The time duration before key expiring to rotate or notify. It will be in ISO 8601 duration format. Eg: 'P90D', 'P1Y'.
   */
  readonly timeBeforeExpiry?: string;
}

/**
 * UserAssignedIdentity definition.
 */
export interface UserAssignedIdentity {
}

/**
 * VaultAccessPolicyProps definition.
 */
export interface VaultAccessPolicyProps {
  /**
   * An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.
   */
  readonly accessPolicies?: AccessPolicyEntry[] | any;
}

/**
 * VaultProps definition.
 */
export interface VaultProps {
  /**
   * An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are required.
   */
  readonly accessPolicies?: AccessPolicyEntry[] | any;
  /**
   * The vault's create mode to indicate whether the vault need to be recovered or not.
   */
  readonly createMode?: 'recover' | 'default' | any;
  /**
   * Property specifying whether protection against purge is enabled for this vault. Setting this property to true activates protection against purge for this vault and its content - only the Key Vault service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this functionality is irreversible - that is, the property does not accept false as its value.
   */
  readonly enablePurgeProtection?: boolean | any;
  /**
   * Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.
   */
  readonly enableRbacAuthorization?: boolean | any;
  /**
   * Property to specify whether the 'soft delete' functionality is enabled for this key vault. If it's not set to any value(true or false) when creating new key vault, it will be set to true by default. Once set to true, it cannot be reverted to false.
   */
  readonly enableSoftDelete?: boolean | any;
  /**
   * Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault.
   */
  readonly enabledForDeployment?: boolean | any;
  /**
   * Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.
   */
  readonly enabledForDiskEncryption?: boolean | any;
  /**
   * Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.
   */
  readonly enabledForTemplateDeployment?: boolean | any;
  /**
   * Rules governing the accessibility of the key vault from specific network locations.
   */
  readonly networkAcls?: NetworkRuleSet | any;
  /**
   * Provisioning state of the vault.
   */
  readonly provisioningState?: 'Succeeded' | 'RegisteringDns' | any;
  /**
   * Property to specify whether the vault will accept traffic from public internet. If set to 'disabled' all traffic except private endpoint traffic and that that originates from trusted services will be blocked. This will override the set firewall rules, meaning that even if the firewall rules are present we will not honor the rules.
   */
  readonly publicNetworkAccess?: string;
  /**
   * SKU details
   */
  readonly sku?: Sku | any;
  /**
   * softDelete data retention days. It accepts >=7 and <=90.
   */
  readonly softDeleteRetentionInDays?: number | any;
  /**
   * The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
   */
  readonly tenantId?: string | any;
  /**
   * The URI of the vault for performing operations on keys and secrets.
   */
  readonly vaultUri?: string;
}

/**
 * VirtualNetworkRule definition.
 */
export interface VirtualNetworkRule {
  /**
   * Full resource id of a vnet subnet, such as '/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1'.
   */
  readonly id?: string;
  /**
   * Property to specify whether NRP will ignore the check if parent subnet has serviceEndpoints configured.
   */
  readonly ignoreMissingVnetServiceEndpoint?: boolean | any;
}

/**
 * managedHSMs_keys_childResource definition.
 */
export interface managedHSMs_keys_childResource {
  /**
   * The name of the key to be created. The value you provide may be copied globally for the purpose of running the service. The value provided should not include personally identifiable or sensitive information.
   */
  readonly name?: string | any;
  /**
   * The properties of the key to be created.
   */
  readonly properties?: any;
  /**
   * The tags that will be assigned to the key.
   */
  readonly tags?: Record<string, string> | any;
}

/**
 * managedHSMs_privateEndpointConnections_childResource definition.
 */
export interface managedHSMs_privateEndpointConnections_childResource {
  /**
   * Modified whenever there is a change in the state of private endpoint connection.
   */
  readonly etag?: string;
  /**
   * Managed service identity (system assigned and/or user assigned identities)
   */
  readonly identity?: ManagedServiceIdentity | any;
  /**
   * The supported Azure location where the managed HSM Pool should be created.
   */
  readonly location?: string;
  /**
   * Name of the private endpoint connection associated with the managed hsm pool.
   */
  readonly name?: string;
  /**
   * Resource properties.
   */
  readonly properties?: any;
  /**
   * SKU details
   */
  readonly sku?: ManagedHsmSku | any;
  /**
   * Resource tags
   */
  readonly tags?: Record<string, string> | any;
}

/**
 * vaults_accessPolicies_childResource definition.
 */
export interface vaults_accessPolicies_childResource {
  /**
   * Name of the operation
   */
  readonly name?: 'add' | 'replace' | 'remove' | any;
  /**
   * Properties of the access policy
   */
  readonly properties?: any;
}

/**
 * vaults_keys_childResource definition.
 */
export interface vaults_keys_childResource {
  /**
   * The name of the key to be created. The value you provide may be copied globally for the purpose of running the service. The value provided should not include personally identifiable or sensitive information.
   */
  readonly name?: string | any;
  /**
   * The properties of the key to be created.
   */
  readonly properties?: any;
  /**
   * The tags that will be assigned to the key.
   */
  readonly tags?: Record<string, string> | any;
}

/**
 * vaults_privateEndpointConnections_childResource definition.
 */
export interface vaults_privateEndpointConnections_childResource {
  /**
   * Modified whenever there is a change in the state of private endpoint connection.
   */
  readonly etag?: string;
  /**
   * Name of the private endpoint connection associated with the key vault.
   */
  readonly name?: string;
  /**
   * Resource properties.
   */
  readonly properties?: any;
}

/**
 * vaults_secrets_childResource definition.
 */
export interface vaults_secrets_childResource {
  /**
   * Name of the secret. The value you provide may be copied globally for the purpose of running the service. The value provided should not include personally identifiable or sensitive information.
   */
  readonly name?: string | any;
  /**
   * Properties of the secret
   */
  readonly properties?: any;
  /**
   * The tags that will be assigned to the secret. 
   */
  readonly tags?: Record<string, string> | any;
}

/**
 * Properties for Microsoft.KeyVault/managedHSMs (L1 construct).
 *
 * @remarks
 * Microsoft.KeyVault/managedHSMs
 *
 * **ARM Resource Type**: `Microsoft.KeyVault/managedHSMs`
 * **API Version**: `2024-12-01-preview`
 *
 * Direct mapping to ARM resource properties with no defaults or transformations.
 */
export interface ArmManagedHSMsProps {
  /**
   * Managed service identity (system assigned and/or user assigned identities)
   */
  readonly identity?: ManagedServiceIdentity | any;
  /**
   * The supported Azure location where the managed HSM Pool should be created.
   */
  readonly location?: string;
  /**
   * Name of the managed HSM Pool
   */
  readonly name: string;
  /**
   * Properties of the managed HSM
   */
  readonly properties: any;
  /**
   * SKU details
   */
  readonly sku?: ManagedHsmSku | any;
  /**
   * Resource tags
   */
  readonly tags?: Record<string, string> | any;
}

/**
 * Properties for Microsoft.KeyVault/managedHSMs/keys (L1 construct).
 *
 * @remarks
 * Microsoft.KeyVault/managedHSMs/keys
 *
 * **ARM Resource Type**: `Microsoft.KeyVault/managedHSMs/keys`
 * **API Version**: `2024-12-01-preview`
 *
 * Direct mapping to ARM resource properties with no defaults or transformations.
 */
export interface ArmManagedHSMsKeysProps {
  /**
   * The name of the key to be created. The value you provide may be copied globally for the purpose of running the service. The value provided should not include personally identifiable or sensitive information.
   */
  readonly name: string | any;
  /**
   * The properties of the key to be created.
   */
  readonly properties: any;
  /**
   * The tags that will be assigned to the key.
   */
  readonly tags?: Record<string, string> | any;
}

/**
 * Properties for Microsoft.KeyVault/managedHSMs/privateEndpointConnections (L1 construct).
 *
 * @remarks
 * Microsoft.KeyVault/managedHSMs/privateEndpointConnections
 *
 * **ARM Resource Type**: `Microsoft.KeyVault/managedHSMs/privateEndpointConnections`
 * **API Version**: `2024-12-01-preview`
 *
 * Direct mapping to ARM resource properties with no defaults or transformations.
 */
export interface ArmManagedHSMsPrivateEndpointConnectionsProps {
  /**
   * Modified whenever there is a change in the state of private endpoint connection.
   */
  readonly etag?: string;
  /**
   * Managed service identity (system assigned and/or user assigned identities)
   */
  readonly identity?: ManagedServiceIdentity | any;
  /**
   * The supported Azure location where the managed HSM Pool should be created.
   */
  readonly location?: string;
  /**
   * Name of the private endpoint connection associated with the managed hsm pool.
   */
  readonly name: string;
  /**
   * Resource properties.
   */
  readonly properties: any;
  /**
   * SKU details
   */
  readonly sku?: ManagedHsmSku | any;
  /**
   * Resource tags
   */
  readonly tags?: Record<string, string> | any;
}

/**
 * Properties for Microsoft.KeyVault/vaults (L1 construct).
 *
 * @remarks
 * Microsoft.KeyVault/vaults
 *
 * **ARM Resource Type**: `Microsoft.KeyVault/vaults`
 * **API Version**: `2024-12-01-preview`
 *
 * Direct mapping to ARM resource properties with no defaults or transformations.
 */
export interface ArmVaultsProps {
  /**
   * The supported Azure location where the key vault should be created.
   */
  readonly location?: string;
  /**
   * Name of the vault
   */
  readonly name: string | any;
  /**
   * Properties of the vault
   */
  readonly properties: any;
  /**
   * The tags that will be assigned to the key vault.
   */
  readonly tags?: Record<string, string> | any;
}

/**
 * Properties for Microsoft.KeyVault/vaults/accessPolicies (L1 construct).
 *
 * @remarks
 * Microsoft.KeyVault/vaults/accessPolicies
 *
 * **ARM Resource Type**: `Microsoft.KeyVault/vaults/accessPolicies`
 * **API Version**: `2024-12-01-preview`
 *
 * Direct mapping to ARM resource properties with no defaults or transformations.
 */
export interface ArmVaultsAccessPoliciesProps {
  /**
   * Name of the operation
   */
  readonly name: 'add' | 'replace' | 'remove' | any;
  /**
   * Properties of the access policy
   */
  readonly properties: any;
}

/**
 * Properties for Microsoft.KeyVault/vaults/keys (L1 construct).
 *
 * @remarks
 * Microsoft.KeyVault/vaults/keys
 *
 * **ARM Resource Type**: `Microsoft.KeyVault/vaults/keys`
 * **API Version**: `2024-12-01-preview`
 *
 * Direct mapping to ARM resource properties with no defaults or transformations.
 */
export interface ArmVaultsKeysProps {
  /**
   * The name of the key to be created. The value you provide may be copied globally for the purpose of running the service. The value provided should not include personally identifiable or sensitive information.
   */
  readonly name: string | any;
  /**
   * The properties of the key to be created.
   */
  readonly properties: any;
  /**
   * The tags that will be assigned to the key.
   */
  readonly tags?: Record<string, string> | any;
}

/**
 * Properties for Microsoft.KeyVault/vaults/privateEndpointConnections (L1 construct).
 *
 * @remarks
 * Microsoft.KeyVault/vaults/privateEndpointConnections
 *
 * **ARM Resource Type**: `Microsoft.KeyVault/vaults/privateEndpointConnections`
 * **API Version**: `2024-12-01-preview`
 *
 * Direct mapping to ARM resource properties with no defaults or transformations.
 */
export interface ArmVaultsPrivateEndpointConnectionsProps {
  /**
   * Modified whenever there is a change in the state of private endpoint connection.
   */
  readonly etag?: string;
  /**
   * Name of the private endpoint connection associated with the key vault.
   */
  readonly name: string;
  /**
   * Resource properties.
   */
  readonly properties: any;
}

/**
 * Properties for Microsoft.KeyVault/vaults/secrets (L1 construct).
 *
 * @remarks
 * Microsoft.KeyVault/vaults/secrets
 *
 * **ARM Resource Type**: `Microsoft.KeyVault/vaults/secrets`
 * **API Version**: `2024-12-01-preview`
 *
 * Direct mapping to ARM resource properties with no defaults or transformations.
 */
export interface ArmVaultsSecretsProps {
  /**
   * Name of the secret. The value you provide may be copied globally for the purpose of running the service. The value provided should not include personally identifiable or sensitive information.
   */
  readonly name: string | any;
  /**
   * Properties of the secret
   */
  readonly properties: any;
  /**
   * The tags that will be assigned to the secret. 
   */
  readonly tags?: Record<string, string> | any;
}
