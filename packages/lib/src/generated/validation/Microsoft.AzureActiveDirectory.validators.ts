/**
 * Runtime validators for Microsoft.AzureActiveDirectory resources.
 *
 * **API Version**: 2023-05-17-preview
 * **Generated**: 2025-10-13T00:00:00.000Z
 *
 * @remarks
 * This file is auto-generated. Do not edit manually.
 * Generated by Felix (Schema & Validation Engineer)
 *
 * @packageDocumentation
 */

/**
 * Validation error.
 */
export interface ValidationError {
  readonly path: string;
  readonly message: string;
  readonly code: string;
  readonly fix?: string;
}

/**
 * Validation result.
 */
export interface ValidationResult {
  readonly valid: boolean;
  readonly errors: ValidationError[];
}

/**
 * Validate GUID format.
 *
 * @param value - Value to validate
 * @returns true if valid GUID format
 */
function isValidGuid(value: string): boolean {
  const guidPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
  return guidPattern.test(value);
}

/**
 * Validate domain name format.
 *
 * @param value - Value to validate
 * @returns true if valid domain name format
 */
function isValidDomainName(value: string): boolean {
  // Basic domain validation - at least one dot and valid characters
  const domainPattern = /^[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;
  return domainPattern.test(value);
}

/**
 * Validate initial domain name format for B2C.
 *
 * @param value - Value to validate
 * @returns true if valid initial domain name format
 */
function isValidInitialDomainName(value: string): boolean {
  // Must be lowercase letters, numbers, and hyphens only
  // Cannot start or end with hyphen
  const pattern = /^[a-z0-9]([a-z0-9-]*[a-z0-9])?$/;
  return pattern.test(value);
}

/**
 * Validate country code format (ISO 3166-1 alpha-2).
 *
 * @param value - Value to validate
 * @returns true if valid country code format
 */
function isValidCountryCode(value: string): boolean {
  // Must be exactly 2 uppercase letters
  const pattern = /^[A-Z]{2}$/;
  return pattern.test(value);
}

/**
 * Validate Microsoft.AzureActiveDirectory/b2cDirectories properties.
 *
 * @param props - Resource properties to validate
 * @returns Validation result
 */
export function validateB2CDirectories(props: any): ValidationResult {
  const errors: ValidationError[] = [];

  // Validate required property: name
  if (props.name === undefined || props.name === null) {
    errors.push({
      path: 'name',
      message: 'Required property "name" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "name" property to your B2C directory resource',
    });
  } else if (typeof props.name === 'string') {
    // Validate name length
    if (props.name.length < 1) {
      errors.push({
        path: 'name',
        message: 'Property "name" must be at least 1 character',
        code: 'STRING_TOO_SHORT',
        fix: 'Provide a non-empty name',
      });
    }
    if (props.name.length > 260) {
      errors.push({
        path: 'name',
        message: 'Property "name" must not exceed 260 characters',
        code: 'STRING_TOO_LONG',
        fix: 'Shorten the name to 260 characters or less',
      });
    }
  }

  // Validate required property: location
  if (props.location === undefined || props.location === null) {
    errors.push({
      path: 'location',
      message: 'Required property "location" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "location" property (e.g., "United States", "Europe", "global")',
    });
  }

  // Validate required property: sku
  if (props.sku === undefined || props.sku === null) {
    errors.push({
      path: 'sku',
      message: 'Required property "sku" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "sku" object with a "name" property',
    });
  } else {
    // Validate sku.name
    const validSkuNames = ['Standard', 'PremiumP1', 'PremiumP2'];
    if (props.sku.name && !validSkuNames.includes(props.sku.name) && typeof props.sku.name !== 'object') {
      errors.push({
        path: 'sku.name',
        message: `Property "sku.name" must be one of: ${validSkuNames.join(', ')}`,
        code: 'INVALID_ENUM_VALUE',
        fix: `Use one of the valid SKU names: ${validSkuNames.join(', ')}`,
      });
    }

    // Validate sku.tier
    if (props.sku.tier && props.sku.tier !== 'A0' && typeof props.sku.tier !== 'object') {
      errors.push({
        path: 'sku.tier',
        message: 'Property "sku.tier" must be "A0"',
        code: 'INVALID_ENUM_VALUE',
        fix: 'Set sku.tier to "A0"',
      });
    }
  }

  // Validate properties if present
  if (props.properties !== undefined && props.properties !== null) {
    const propsObj = props.properties;

    // Validate location enum
    if (propsObj.location !== undefined && propsObj.location !== null) {
      const validLocations = ['United States', 'Europe', 'Asia Pacific', 'Australia'];
      if (!validLocations.includes(propsObj.location) && typeof propsObj.location !== 'object') {
        errors.push({
          path: 'properties.location',
          message: `Property "location" must be one of: ${validLocations.join(', ')}`,
          code: 'INVALID_ENUM_VALUE',
          fix: `Use one of the valid data residency locations: ${validLocations.join(', ')}`,
        });
      }
    }

    // Validate createTenantProperties
    if (propsObj.createTenantProperties !== undefined && propsObj.createTenantProperties !== null) {
      const tenantProps = propsObj.createTenantProperties;

      // Validate initialDomainName
      if (tenantProps.initialDomainName !== undefined && tenantProps.initialDomainName !== null) {
        if (typeof tenantProps.initialDomainName === 'string') {
          if (tenantProps.initialDomainName.length < 3) {
            errors.push({
              path: 'properties.createTenantProperties.initialDomainName',
              message: 'Property "initialDomainName" must be at least 3 characters',
              code: 'STRING_TOO_SHORT',
              fix: 'Provide a domain name with at least 3 characters',
            });
          }
          if (tenantProps.initialDomainName.length > 63) {
            errors.push({
              path: 'properties.createTenantProperties.initialDomainName',
              message: 'Property "initialDomainName" must not exceed 63 characters',
              code: 'STRING_TOO_LONG',
              fix: 'Shorten the domain name to 63 characters or less',
            });
          }
          if (!isValidInitialDomainName(tenantProps.initialDomainName)) {
            errors.push({
              path: 'properties.createTenantProperties.initialDomainName',
              message: 'Property "initialDomainName" must contain only lowercase letters, numbers, and hyphens, and cannot start or end with a hyphen',
              code: 'INVALID_DOMAIN_FORMAT',
              fix: 'Use only lowercase letters, numbers, and hyphens; avoid starting or ending with hyphens',
            });
          }
        }
      }

      // Validate countryCode
      if (tenantProps.countryCode !== undefined && tenantProps.countryCode !== null) {
        if (typeof tenantProps.countryCode === 'string' && !isValidCountryCode(tenantProps.countryCode)) {
          errors.push({
            path: 'properties.createTenantProperties.countryCode',
            message: 'Property "countryCode" must be a valid ISO 3166-1 alpha-2 country code (2 uppercase letters)',
            code: 'INVALID_COUNTRY_CODE',
            fix: 'Use a valid 2-letter country code (e.g., "US", "GB", "DE")',
          });
        }
      }

      // Validate displayName length
      if (tenantProps.displayName !== undefined && tenantProps.displayName !== null) {
        if (typeof tenantProps.displayName === 'string' && tenantProps.displayName.length > 256) {
          errors.push({
            path: 'properties.createTenantProperties.displayName',
            message: 'Property "displayName" must not exceed 256 characters',
            code: 'STRING_TOO_LONG',
            fix: 'Shorten the display name to 256 characters or less',
          });
        }
      }
    }

    // Validate domains
    if (propsObj.domains !== undefined && propsObj.domains !== null) {
      if (Array.isArray(propsObj.domains)) {
        propsObj.domains.forEach((domain: any, index: number) => {
          if (domain.name && typeof domain.name === 'string' && !isValidDomainName(domain.name)) {
            errors.push({
              path: `properties.domains[${index}].name`,
              message: 'Property "name" must be a valid domain name',
              code: 'INVALID_DOMAIN_FORMAT',
              fix: 'Provide a valid fully qualified domain name (e.g., "login.contoso.com")',
            });
          }

          if (domain.verificationStatus !== undefined && domain.verificationStatus !== null) {
            const validStatuses = ['Verified', 'Unverified', 'Failed'];
            if (!validStatuses.includes(domain.verificationStatus) && typeof domain.verificationStatus !== 'object') {
              errors.push({
                path: `properties.domains[${index}].verificationStatus`,
                message: `Property "verificationStatus" must be one of: ${validStatuses.join(', ')}`,
                code: 'INVALID_ENUM_VALUE',
                fix: `Use one of: ${validStatuses.join(', ')}`,
              });
            }
          }
        });
      }
    }

    // Validate billingConfig
    if (propsObj.billingConfig !== undefined && propsObj.billingConfig !== null) {
      const billingConfig = propsObj.billingConfig;

      if (billingConfig.billingType !== undefined && billingConfig.billingType !== null) {
        const validBillingTypes = ['MAU', 'Auths'];
        if (!validBillingTypes.includes(billingConfig.billingType) && typeof billingConfig.billingType !== 'object') {
          errors.push({
            path: 'properties.billingConfig.billingType',
            message: `Property "billingType" must be one of: ${validBillingTypes.join(', ')}`,
            code: 'INVALID_ENUM_VALUE',
            fix: `Use one of: ${validBillingTypes.join(', ')}`,
          });
        }
      }

      if (billingConfig.billingSubscriptionId !== undefined && billingConfig.billingSubscriptionId !== null) {
        if (typeof billingConfig.billingSubscriptionId === 'string' && !isValidGuid(billingConfig.billingSubscriptionId)) {
          errors.push({
            path: 'properties.billingConfig.billingSubscriptionId',
            message: 'Property "billingSubscriptionId" must be a valid GUID',
            code: 'INVALID_GUID_FORMAT',
            fix: 'Use a valid subscription ID in GUID format',
          });
        }
      }
    }
  }

  return {
    valid: errors.length === 0,
    errors,
  };
}

/**
 * Validate Microsoft.AzureActiveDirectory/ciamDirectories properties.
 *
 * @param props - Resource properties to validate
 * @returns Validation result
 */
export function validateCIAMDirectories(props: any): ValidationResult {
  const errors: ValidationError[] = [];

  // Validate required property: name
  if (props.name === undefined || props.name === null) {
    errors.push({
      path: 'name',
      message: 'Required property "name" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "name" property to your CIAM directory resource',
    });
  } else if (typeof props.name === 'string') {
    // Validate name length
    if (props.name.length < 1) {
      errors.push({
        path: 'name',
        message: 'Property "name" must be at least 1 character',
        code: 'STRING_TOO_SHORT',
        fix: 'Provide a non-empty name',
      });
    }
    if (props.name.length > 260) {
      errors.push({
        path: 'name',
        message: 'Property "name" must not exceed 260 characters',
        code: 'STRING_TOO_LONG',
        fix: 'Shorten the name to 260 characters or less',
      });
    }
  }

  // Validate required property: location
  if (props.location === undefined || props.location === null) {
    errors.push({
      path: 'location',
      message: 'Required property "location" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "location" property with a valid Azure region (e.g., "eastus", "westeurope")',
    });
  }

  // Validate required property: sku
  if (props.sku === undefined || props.sku === null) {
    errors.push({
      path: 'sku',
      message: 'Required property "sku" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "sku" object with a "name" property',
    });
  } else {
    // Validate sku.name
    const validSkuNames = ['Free', 'Standard', 'Premium'];
    if (props.sku.name && !validSkuNames.includes(props.sku.name) && typeof props.sku.name !== 'object') {
      errors.push({
        path: 'sku.name',
        message: `Property "sku.name" must be one of: ${validSkuNames.join(', ')}`,
        code: 'INVALID_ENUM_VALUE',
        fix: `Use one of the valid SKU names: ${validSkuNames.join(', ')}`,
      });
    }
  }

  // Validate properties if present
  if (props.properties !== undefined && props.properties !== null) {
    const propsObj = props.properties;

    // Validate displayName length
    if (propsObj.displayName !== undefined && propsObj.displayName !== null) {
      if (typeof propsObj.displayName === 'string' && propsObj.displayName.length > 256) {
        errors.push({
          path: 'properties.displayName',
          message: 'Property "displayName" must not exceed 256 characters',
          code: 'STRING_TOO_LONG',
          fix: 'Shorten the display name to 256 characters or less',
        });
      }
    }

    // Validate domainName
    if (propsObj.domainName !== undefined && propsObj.domainName !== null) {
      if (typeof propsObj.domainName === 'string' && !isValidDomainName(propsObj.domainName)) {
        errors.push({
          path: 'properties.domainName',
          message: 'Property "domainName" must be a valid domain name',
          code: 'INVALID_DOMAIN_FORMAT',
          fix: 'Provide a valid domain name format',
        });
      }
    }

    // Validate location enum
    if (propsObj.location !== undefined && propsObj.location !== null) {
      const validLocations = ['United States', 'Europe', 'Asia Pacific', 'Australia'];
      if (!validLocations.includes(propsObj.location) && typeof propsObj.location !== 'object') {
        errors.push({
          path: 'properties.location',
          message: `Property "location" must be one of: ${validLocations.join(', ')}`,
          code: 'INVALID_ENUM_VALUE',
          fix: `Use one of the valid data residency locations: ${validLocations.join(', ')}`,
        });
      }
    }

    // Validate securitySettings
    if (propsObj.securitySettings !== undefined && propsObj.securitySettings !== null) {
      const secSettings = propsObj.securitySettings;

      // Validate passwordComplexity
      if (secSettings.passwordComplexity !== undefined && secSettings.passwordComplexity !== null) {
        const validComplexities = ['Low', 'Medium', 'High'];
        if (!validComplexities.includes(secSettings.passwordComplexity) && typeof secSettings.passwordComplexity !== 'object') {
          errors.push({
            path: 'properties.securitySettings.passwordComplexity',
            message: `Property "passwordComplexity" must be one of: ${validComplexities.join(', ')}`,
            code: 'INVALID_ENUM_VALUE',
            fix: `Use one of: ${validComplexities.join(', ')}`,
          });
        }
      }

      // Validate passwordExpirationDays range
      if (secSettings.passwordExpirationDays !== undefined && secSettings.passwordExpirationDays !== null) {
        if (typeof secSettings.passwordExpirationDays === 'number') {
          if (secSettings.passwordExpirationDays < 0) {
            errors.push({
              path: 'properties.securitySettings.passwordExpirationDays',
              message: 'Property "passwordExpirationDays" must be at least 0',
              code: 'NUMBER_TOO_SMALL',
              fix: 'Set passwordExpirationDays to 0 or greater (0 means no expiration)',
            });
          }
          if (secSettings.passwordExpirationDays > 730) {
            errors.push({
              path: 'properties.securitySettings.passwordExpirationDays',
              message: 'Property "passwordExpirationDays" must not exceed 730 (2 years)',
              code: 'NUMBER_TOO_LARGE',
              fix: 'Set passwordExpirationDays to 730 or less',
            });
          }
        }
      }

      // Validate accountLockoutThreshold range
      if (secSettings.accountLockoutThreshold !== undefined && secSettings.accountLockoutThreshold !== null) {
        if (typeof secSettings.accountLockoutThreshold === 'number') {
          if (secSettings.accountLockoutThreshold < 1) {
            errors.push({
              path: 'properties.securitySettings.accountLockoutThreshold',
              message: 'Property "accountLockoutThreshold" must be at least 1',
              code: 'NUMBER_TOO_SMALL',
              fix: 'Set accountLockoutThreshold to 1 or greater',
            });
          }
          if (secSettings.accountLockoutThreshold > 999) {
            errors.push({
              path: 'properties.securitySettings.accountLockoutThreshold',
              message: 'Property "accountLockoutThreshold" must not exceed 999',
              code: 'NUMBER_TOO_LARGE',
              fix: 'Set accountLockoutThreshold to 999 or less',
            });
          }
        }
      }

      // Validate accountLockoutDurationMinutes range
      if (secSettings.accountLockoutDurationMinutes !== undefined && secSettings.accountLockoutDurationMinutes !== null) {
        if (typeof secSettings.accountLockoutDurationMinutes === 'number') {
          if (secSettings.accountLockoutDurationMinutes < 1) {
            errors.push({
              path: 'properties.securitySettings.accountLockoutDurationMinutes',
              message: 'Property "accountLockoutDurationMinutes" must be at least 1',
              code: 'NUMBER_TOO_SMALL',
              fix: 'Set accountLockoutDurationMinutes to 1 or greater',
            });
          }
          if (secSettings.accountLockoutDurationMinutes > 43200) {
            errors.push({
              path: 'properties.securitySettings.accountLockoutDurationMinutes',
              message: 'Property "accountLockoutDurationMinutes" must not exceed 43200 (30 days)',
              code: 'NUMBER_TOO_LARGE',
              fix: 'Set accountLockoutDurationMinutes to 43200 or less',
            });
          }
        }
      }
    }
  }

  return {
    valid: errors.length === 0,
    errors,
  };
}

/**
 * Validate Microsoft.AzureActiveDirectory/guestUsages properties.
 *
 * @param props - Resource properties to validate
 * @returns Validation result
 */
export function validateGuestUsages(props: any): ValidationResult {
  const errors: ValidationError[] = [];

  // Validate required property: name
  if (props.name === undefined || props.name === null) {
    errors.push({
      path: 'name',
      message: 'Required property "name" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "name" property to your guest usage resource',
    });
  }

  // Validate required property: location
  if (props.location === undefined || props.location === null) {
    errors.push({
      path: 'location',
      message: 'Required property "location" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "location" property (typically "global")',
    });
  }

  // Validate properties if present
  if (props.properties !== undefined && props.properties !== null) {
    const propsObj = props.properties;

    // Validate tenantId
    if (propsObj.tenantId !== undefined && propsObj.tenantId !== null) {
      if (typeof propsObj.tenantId === 'string' && !isValidGuid(propsObj.tenantId)) {
        errors.push({
          path: 'properties.tenantId',
          message: 'Property "tenantId" must be a valid GUID',
          code: 'INVALID_GUID_FORMAT',
          fix: 'Use a valid tenant ID in GUID format',
        });
      }
    }
  }

  return {
    valid: errors.length === 0,
    errors,
  };
}
