/**
 * Runtime validators for Microsoft.Storage resources.
 *
 * **API Version**: 2025-01-01
 * **Generated**: 2025-10-04T02:29:55.521Z
 *
 * @remarks
 * This file is auto-generated. Do not edit manually.
 * Generated by Felix (Schema & Validation Engineer)
 *
 * @packageDocumentation
 */

/**
 * Validation error.
 */
export interface ValidationError {
  readonly path: string;
  readonly message: string;
  readonly code: string;
  readonly fix?: string;
}

/**
 * Validation result.
 */
export interface ValidationResult {
  readonly valid: boolean;
  readonly errors: ValidationError[];
}

/**
 * Validate Microsoft.Storage/storageAccounts properties.
 *
 * @param props - Resource properties to validate
 * @returns Validation result
 */
export function validateStorageAccounts(props: any): ValidationResult {
  const errors: ValidationError[] = [];

  // Validate required property: name
  if (props.name === undefined || props.name === null) {
    errors.push({
      path: 'name',
      message: 'Required property "name" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "name" property to your resource definition',
    });
  }

  return {
    valid: errors.length === 0,
    errors,
  };
}

/**
 * Validate Microsoft.Storage/storageAccounts/blobServices properties.
 *
 * @param props - Resource properties to validate
 * @returns Validation result
 */
export function validateStorageAccountsBlobServices(props: any): ValidationResult {
  const errors: ValidationError[] = [];

  // Validate required property: name
  if (props.name === undefined || props.name === null) {
    errors.push({
      path: 'name',
      message: 'Required property "name" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "name" property to your resource definition',
    });
  }

  return {
    valid: errors.length === 0,
    errors,
  };
}

/**
 * Validate Microsoft.Storage/storageAccounts/blobServices/containers properties.
 *
 * @param props - Resource properties to validate
 * @returns Validation result
 */
export function validateStorageAccountsBlobServicesContainers(props: any): ValidationResult {
  const errors: ValidationError[] = [];

  // Validate required property: name
  if (props.name === undefined || props.name === null) {
    errors.push({
      path: 'name',
      message: 'Required property "name" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "name" property to your resource definition',
    });
  }

  // Validate constraints on: name
  if (props.name !== undefined && props.name !== null) {
    if (typeof props.name === 'string') {
      if (props.name.length < 3) {
        errors.push({
          path: 'name',
          message: 'Property "name" must be at least 3 characters',
          code: 'STRING_TOO_SHORT',
          fix: 'Provide a longer value for "name"',
        });
      }
      if (props.name.length > 63) {
        errors.push({
          path: 'name',
          message: 'Property "name" must be at most 63 characters',
          code: 'STRING_TOO_LONG',
          fix: 'Shorten the value of "name" to 63 characters or less',
        });
      }
    }
  }

  return {
    valid: errors.length === 0,
    errors,
  };
}

/**
 * Validate Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies properties.
 *
 * @param props - Resource properties to validate
 * @returns Validation result
 */
export function validateStorageAccountsBlobServicesContainersImmutabilityPolicies(
  props: any
): ValidationResult {
  const errors: ValidationError[] = [];

  // Validate required property: name
  if (props.name === undefined || props.name === null) {
    errors.push({
      path: 'name',
      message: 'Required property "name" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "name" property to your resource definition',
    });
  }

  return {
    valid: errors.length === 0,
    errors,
  };
}

/**
 * Validate Microsoft.Storage/storageAccounts/encryptionScopes properties.
 *
 * @param props - Resource properties to validate
 * @returns Validation result
 */
export function validateStorageAccountsEncryptionScopes(props: any): ValidationResult {
  const errors: ValidationError[] = [];

  // Validate required property: name
  if (props.name === undefined || props.name === null) {
    errors.push({
      path: 'name',
      message: 'Required property "name" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "name" property to your resource definition',
    });
  }

  // Validate constraints on: name
  if (props.name !== undefined && props.name !== null) {
    if (typeof props.name === 'string') {
      if (props.name.length < 3) {
        errors.push({
          path: 'name',
          message: 'Property "name" must be at least 3 characters',
          code: 'STRING_TOO_SHORT',
          fix: 'Provide a longer value for "name"',
        });
      }
      if (props.name.length > 63) {
        errors.push({
          path: 'name',
          message: 'Property "name" must be at most 63 characters',
          code: 'STRING_TOO_LONG',
          fix: 'Shorten the value of "name" to 63 characters or less',
        });
      }
    }
  }

  return {
    valid: errors.length === 0,
    errors,
  };
}

/**
 * Validate Microsoft.Storage/storageAccounts/fileServices properties.
 *
 * @param props - Resource properties to validate
 * @returns Validation result
 */
export function validateStorageAccountsFileServices(props: any): ValidationResult {
  const errors: ValidationError[] = [];

  // Validate required property: name
  if (props.name === undefined || props.name === null) {
    errors.push({
      path: 'name',
      message: 'Required property "name" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "name" property to your resource definition',
    });
  }

  return {
    valid: errors.length === 0,
    errors,
  };
}

/**
 * Validate Microsoft.Storage/storageAccounts/fileServices/shares properties.
 *
 * @param props - Resource properties to validate
 * @returns Validation result
 */
export function validateStorageAccountsFileServicesShares(props: any): ValidationResult {
  const errors: ValidationError[] = [];

  // Validate required property: name
  if (props.name === undefined || props.name === null) {
    errors.push({
      path: 'name',
      message: 'Required property "name" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "name" property to your resource definition',
    });
  }

  // Validate constraints on: name
  if (props.name !== undefined && props.name !== null) {
    if (typeof props.name === 'string') {
      if (props.name.length < 3) {
        errors.push({
          path: 'name',
          message: 'Property "name" must be at least 3 characters',
          code: 'STRING_TOO_SHORT',
          fix: 'Provide a longer value for "name"',
        });
      }
      if (props.name.length > 63) {
        errors.push({
          path: 'name',
          message: 'Property "name" must be at most 63 characters',
          code: 'STRING_TOO_LONG',
          fix: 'Shorten the value of "name" to 63 characters or less',
        });
      }
    }
  }

  return {
    valid: errors.length === 0,
    errors,
  };
}

/**
 * Validate Microsoft.Storage/storageAccounts/inventoryPolicies properties.
 *
 * @param props - Resource properties to validate
 * @returns Validation result
 */
export function validateStorageAccountsInventoryPolicies(props: any): ValidationResult {
  const errors: ValidationError[] = [];

  // Validate required property: name
  if (props.name === undefined || props.name === null) {
    errors.push({
      path: 'name',
      message: 'Required property "name" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "name" property to your resource definition',
    });
  }

  return {
    valid: errors.length === 0,
    errors,
  };
}

/**
 * Validate Microsoft.Storage/storageAccounts/localUsers properties.
 *
 * @param props - Resource properties to validate
 * @returns Validation result
 */
export function validateStorageAccountsLocalUsers(props: any): ValidationResult {
  const errors: ValidationError[] = [];

  // Validate required property: name
  if (props.name === undefined || props.name === null) {
    errors.push({
      path: 'name',
      message: 'Required property "name" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "name" property to your resource definition',
    });
  }

  // Validate constraints on: name
  if (props.name !== undefined && props.name !== null) {
    if (typeof props.name === 'string') {
      if (props.name.length < 3) {
        errors.push({
          path: 'name',
          message: 'Property "name" must be at least 3 characters',
          code: 'STRING_TOO_SHORT',
          fix: 'Provide a longer value for "name"',
        });
      }
      if (props.name.length > 64) {
        errors.push({
          path: 'name',
          message: 'Property "name" must be at most 64 characters',
          code: 'STRING_TOO_LONG',
          fix: 'Shorten the value of "name" to 64 characters or less',
        });
      }
    }
  }

  return {
    valid: errors.length === 0,
    errors,
  };
}

/**
 * Validate Microsoft.Storage/storageAccounts/managementPolicies properties.
 *
 * @param props - Resource properties to validate
 * @returns Validation result
 */
export function validateStorageAccountsManagementPolicies(props: any): ValidationResult {
  const errors: ValidationError[] = [];

  // Validate required property: name
  if (props.name === undefined || props.name === null) {
    errors.push({
      path: 'name',
      message: 'Required property "name" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "name" property to your resource definition',
    });
  }

  return {
    valid: errors.length === 0,
    errors,
  };
}

/**
 * Validate Microsoft.Storage/storageAccounts/objectReplicationPolicies properties.
 *
 * @param props - Resource properties to validate
 * @returns Validation result
 */
export function validateStorageAccountsObjectReplicationPolicies(props: any): ValidationResult {
  const errors: ValidationError[] = [];

  // Validate required property: name
  if (props.name === undefined || props.name === null) {
    errors.push({
      path: 'name',
      message: 'Required property "name" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "name" property to your resource definition',
    });
  }

  // Validate constraints on: name
  if (props.name !== undefined && props.name !== null) {
    if (typeof props.name === 'string') {
      if (props.name.length < 1) {
        errors.push({
          path: 'name',
          message: 'Property "name" must be at least 1 characters',
          code: 'STRING_TOO_SHORT',
          fix: 'Provide a longer value for "name"',
        });
      }
    }
  }

  return {
    valid: errors.length === 0,
    errors,
  };
}

/**
 * Validate Microsoft.Storage/storageAccounts/privateEndpointConnections properties.
 *
 * @param props - Resource properties to validate
 * @returns Validation result
 */
export function validateStorageAccountsPrivateEndpointConnections(props: any): ValidationResult {
  const errors: ValidationError[] = [];

  // Validate required property: name
  if (props.name === undefined || props.name === null) {
    errors.push({
      path: 'name',
      message: 'Required property "name" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "name" property to your resource definition',
    });
  }

  return {
    valid: errors.length === 0,
    errors,
  };
}

/**
 * Validate Microsoft.Storage/storageAccounts/queueServices properties.
 *
 * @param props - Resource properties to validate
 * @returns Validation result
 */
export function validateStorageAccountsQueueServices(props: any): ValidationResult {
  const errors: ValidationError[] = [];

  // Validate required property: name
  if (props.name === undefined || props.name === null) {
    errors.push({
      path: 'name',
      message: 'Required property "name" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "name" property to your resource definition',
    });
  }

  return {
    valid: errors.length === 0,
    errors,
  };
}

/**
 * Validate Microsoft.Storage/storageAccounts/queueServices/queues properties.
 *
 * @param props - Resource properties to validate
 * @returns Validation result
 */
export function validateStorageAccountsQueueServicesQueues(props: any): ValidationResult {
  const errors: ValidationError[] = [];

  // Validate required property: name
  if (props.name === undefined || props.name === null) {
    errors.push({
      path: 'name',
      message: 'Required property "name" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "name" property to your resource definition',
    });
  }

  return {
    valid: errors.length === 0,
    errors,
  };
}

/**
 * Validate Microsoft.Storage/storageAccounts/storageTaskAssignments properties.
 *
 * @param props - Resource properties to validate
 * @returns Validation result
 */
export function validateStorageAccountsStorageTaskAssignments(props: any): ValidationResult {
  const errors: ValidationError[] = [];

  // Validate required property: name
  if (props.name === undefined || props.name === null) {
    errors.push({
      path: 'name',
      message: 'Required property "name" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "name" property to your resource definition',
    });
  }

  return {
    valid: errors.length === 0,
    errors,
  };
}

/**
 * Validate Microsoft.Storage/storageAccounts/tableServices properties.
 *
 * @param props - Resource properties to validate
 * @returns Validation result
 */
export function validateStorageAccountsTableServices(props: any): ValidationResult {
  const errors: ValidationError[] = [];

  // Validate required property: name
  if (props.name === undefined || props.name === null) {
    errors.push({
      path: 'name',
      message: 'Required property "name" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "name" property to your resource definition',
    });
  }

  return {
    valid: errors.length === 0,
    errors,
  };
}

/**
 * Validate Microsoft.Storage/storageAccounts/tableServices/tables properties.
 *
 * @param props - Resource properties to validate
 * @returns Validation result
 */
export function validateStorageAccountsTableServicesTables(props: any): ValidationResult {
  const errors: ValidationError[] = [];

  // Validate required property: name
  if (props.name === undefined || props.name === null) {
    errors.push({
      path: 'name',
      message: 'Required property "name" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "name" property to your resource definition',
    });
  }

  return {
    valid: errors.length === 0,
    errors,
  };
}
