/**
 * Runtime validators for Microsoft.Purview resources.
 *
 * **API Version**: 2024-04-01-preview
 * **Generated**: 2025-10-13
 *
 * @remarks
 * This file is auto-generated. Do not edit manually.
 * Generated by Felix (Schema & Validation Engineer)
 *
 * @packageDocumentation
 */

/**
 * Validation error details.
 */
export interface ValidationError {
  readonly path: string;
  readonly message: string;
  readonly code: string;
  readonly fix?: string;
}

/**
 * Validation result.
 */
export interface ValidationResult {
  readonly valid: boolean;
  readonly errors: ValidationError[];
}

/**
 * Valid Purview SKU names.
 */
const VALID_SKU_NAMES = ['Free', 'Standard'] as const;

/**
 * Valid identity types.
 */
const VALID_IDENTITY_TYPES = ['None', 'SystemAssigned', 'UserAssigned'] as const;

/**
 * Valid public network access values.
 */
const VALID_PUBLIC_NETWORK_ACCESS = ['Disabled', 'Enabled', 'NotSpecified'] as const;

/**
 * Validate Purview account name.
 *
 * @param name - Account name to validate
 * @returns Validation errors if invalid
 */
function validateAccountName(name: string): ValidationError[] {
  const errors: ValidationError[] = [];

  if (!name) {
    errors.push({
      path: 'name',
      message: 'Account name is required',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Provide an account name',
    });
    return errors;
  }

  // Check length
  if (name.length < 3 || name.length > 63) {
    errors.push({
      path: 'name',
      message: `Account name must be 3-63 characters. Got ${name.length} characters: "${name}"`,
      code: 'INVALID_LENGTH',
      fix: 'Use a name between 3 and 63 characters',
    });
  }

  // Check pattern: lowercase letters, numbers, hyphens; cannot start/end with hyphen
  const pattern = /^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$/;
  if (!pattern.test(name)) {
    errors.push({
      path: 'name',
      message: `Account name must contain only letters, numbers, and hyphens. Cannot start or end with hyphen. Got: "${name}"`,
      code: 'INVALID_PATTERN',
      fix: 'Use only letters (A-Z, a-z), numbers (0-9), and hyphens (-). Cannot start or end with hyphen',
    });
  }

  return errors;
}

/**
 * Validate SKU configuration.
 *
 * @param sku - SKU to validate
 * @returns Validation errors if invalid
 */
function validateSku(sku: any): ValidationError[] {
  const errors: ValidationError[] = [];

  if (!sku) {
    // SKU is optional for Purview accounts
    return errors;
  }

  if (!sku.name) {
    errors.push({
      path: 'sku.name',
      message: 'SKU name is required when SKU is specified',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: `Specify a SKU name. Valid values: ${VALID_SKU_NAMES.join(', ')}`,
    });
  } else if (!VALID_SKU_NAMES.includes(sku.name)) {
    errors.push({
      path: 'sku.name',
      message: `Invalid SKU name: "${sku.name}". Must be one of: ${VALID_SKU_NAMES.join(', ')}`,
      code: 'INVALID_ENUM_VALUE',
      fix: `Use one of the valid SKU names: ${VALID_SKU_NAMES.join(', ')}`,
    });
  }

  if (sku.capacity !== undefined) {
    if (typeof sku.capacity !== 'number' || !Number.isInteger(sku.capacity)) {
      errors.push({
        path: 'sku.capacity',
        message: `SKU capacity must be an integer. Got: ${sku.capacity}`,
        code: 'INVALID_TYPE',
        fix: 'Specify an integer value for capacity',
      });
    } else if (sku.capacity < 1) {
      errors.push({
        path: 'sku.capacity',
        message: `SKU capacity must be at least 1. Got: ${sku.capacity}`,
        code: 'INVALID_RANGE',
        fix: 'Set capacity to at least 1',
      });
    }
  }

  return errors;
}

/**
 * Validate identity configuration.
 *
 * @param identity - Identity to validate
 * @returns Validation errors if invalid
 */
function validateIdentity(identity: any): ValidationError[] {
  const errors: ValidationError[] = [];

  if (!identity) {
    return errors;
  }

  if (!identity.type) {
    errors.push({
      path: 'identity.type',
      message: 'Identity type is required when identity is specified',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: `Specify an identity type. Valid values: ${VALID_IDENTITY_TYPES.join(', ')}`,
    });
  } else if (!VALID_IDENTITY_TYPES.includes(identity.type)) {
    errors.push({
      path: 'identity.type',
      message: `Invalid identity type: "${identity.type}". Must be one of: ${VALID_IDENTITY_TYPES.join(', ')}`,
      code: 'INVALID_ENUM_VALUE',
      fix: `Use one of: ${VALID_IDENTITY_TYPES.join(', ')}`,
    });
  }

  // Validate userAssignedIdentities if type is UserAssigned
  if (identity.type === 'UserAssigned') {
    if (!identity.userAssignedIdentities || Object.keys(identity.userAssignedIdentities).length === 0) {
      errors.push({
        path: 'identity.userAssignedIdentities',
        message: 'User-assigned identities must be specified when identity type is UserAssigned',
        code: 'REQUIRED_PROPERTY_MISSING',
        fix: 'Provide at least one user-assigned identity resource ID',
      });
    }
  }

  return errors;
}

/**
 * Validate public network access setting.
 *
 * @param value - Public network access value
 * @param path - Property path for error reporting
 * @returns Validation errors if invalid
 */
function validatePublicNetworkAccess(value: any, path: string): ValidationError[] {
  const errors: ValidationError[] = [];

  if (value !== undefined && !VALID_PUBLIC_NETWORK_ACCESS.includes(value)) {
    errors.push({
      path,
      message: `Invalid public network access value: "${value}". Must be one of: ${VALID_PUBLIC_NETWORK_ACCESS.join(', ')}`,
      code: 'INVALID_ENUM_VALUE',
      fix: `Use one of: ${VALID_PUBLIC_NETWORK_ACCESS.join(', ')}`,
    });
  }

  return errors;
}

/**
 * Validate managed resource group name.
 *
 * @param name - Resource group name
 * @returns Validation errors if invalid
 */
function validateManagedResourceGroupName(name: string): ValidationError[] {
  const errors: ValidationError[] = [];

  if (!name) {
    return errors;
  }

  // Azure resource group names: 1-90 characters, alphanumeric, underscore, hyphen, period, parentheses
  if (name.length < 1 || name.length > 90) {
    errors.push({
      path: 'properties.managedResourceGroupName',
      message: `Managed resource group name must be 1-90 characters. Got ${name.length} characters: "${name}"`,
      code: 'INVALID_LENGTH',
      fix: 'Use a name between 1 and 90 characters',
    });
  }

  const pattern = /^[-\w._()]+$/;
  if (!pattern.test(name)) {
    errors.push({
      path: 'properties.managedResourceGroupName',
      message: `Managed resource group name contains invalid characters: "${name}"`,
      code: 'INVALID_PATTERN',
      fix: 'Use only alphanumeric characters, underscores, hyphens, periods, and parentheses',
    });
  }

  // Cannot end with period
  if (name.endsWith('.')) {
    errors.push({
      path: 'properties.managedResourceGroupName',
      message: `Managed resource group name cannot end with a period: "${name}"`,
      code: 'INVALID_PATTERN',
      fix: 'Remove trailing period from resource group name',
    });
  }

  return errors;
}

/**
 * Validate account properties.
 *
 * @param properties - Properties to validate
 * @returns Validation errors if invalid
 */
function validateAccountProperties(properties: any): ValidationError[] {
  const errors: ValidationError[] = [];

  if (!properties) {
    return errors;
  }

  // Validate managed resource group name if specified
  if (properties.managedResourceGroupName) {
    errors.push(...validateManagedResourceGroupName(properties.managedResourceGroupName));
  }

  // Validate public network access settings
  if (properties.publicNetworkAccess !== undefined) {
    errors.push(...validatePublicNetworkAccess(properties.publicNetworkAccess, 'properties.publicNetworkAccess'));
  }

  if (properties.managedResourcesPublicNetworkAccess !== undefined) {
    errors.push(
      ...validatePublicNetworkAccess(
        properties.managedResourcesPublicNetworkAccess,
        'properties.managedResourcesPublicNetworkAccess'
      )
    );
  }

  if (properties.managedEventHubState !== undefined) {
    errors.push(...validatePublicNetworkAccess(properties.managedEventHubState, 'properties.managedEventHubState'));
  }

  if (properties.tenantEndpointState !== undefined) {
    errors.push(...validatePublicNetworkAccess(properties.tenantEndpointState, 'properties.tenantEndpointState'));
  }

  // Validate ingestion storage
  if (properties.ingestionStorage?.publicNetworkAccess !== undefined) {
    errors.push(
      ...validatePublicNetworkAccess(
        properties.ingestionStorage.publicNetworkAccess,
        'properties.ingestionStorage.publicNetworkAccess'
      )
    );
  }

  return errors;
}

/**
 * Validate Microsoft.Purview/accounts resource.
 *
 * @param props - Resource properties to validate
 * @returns Validation result with any errors
 *
 * @example
 * ```typescript
 * const result = validatePurviewAccount({
 *   name: 'my-purview-account',
 *   location: 'eastus',
 *   sku: { name: 'Standard' }
 * });
 *
 * if (!result.valid) {
 *   console.error('Validation errors:', result.errors);
 * }
 * ```
 */
export function validatePurviewAccount(props: any): ValidationResult {
  const errors: ValidationError[] = [];

  // Validate required top-level properties
  if (!props.name) {
    errors.push({
      path: 'name',
      message: 'Account name is required',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Provide an account name',
    });
  } else {
    errors.push(...validateAccountName(props.name));
  }

  if (!props.location) {
    errors.push({
      path: 'location',
      message: 'Location is required',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Specify an Azure region (e.g., "eastus", "westus2")',
    });
  }

  // Validate optional properties
  if (props.sku) {
    errors.push(...validateSku(props.sku));
  }

  if (props.identity) {
    errors.push(...validateIdentity(props.identity));
  }

  if (props.properties) {
    errors.push(...validateAccountProperties(props.properties));
  }

  return {
    valid: errors.length === 0,
    errors,
  };
}
