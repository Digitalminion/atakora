/**
 * Runtime validators for Microsoft.ServiceBus resources.
 *
 * **API Version**: 2024-01-01
 * **Generated**: 2025-10-13T21:41:51.310Z
 *
 * @remarks
 * This file is auto-generated. Do not edit manually.
 * Generated by Felix (Schema & Validation Engineer)
 *
 * @packageDocumentation
 */

/**
 * Validation error.
 */
export interface ValidationError {
  readonly path: string;
  readonly message: string;
  readonly code: string;
  readonly fix?: string;
}

/**
 * Validation result.
 */
export interface ValidationResult {
  readonly valid: boolean;
  readonly errors: ValidationError[];
}

/**
 * Validate Microsoft.ServiceBus/namespaces properties.
 *
 * @param props - Resource properties to validate
 * @returns Validation result
 */
export function validateNamespaces(props: any): ValidationResult {
  const errors: ValidationError[] = [];

  // Validate required property: name
  if (props.name === undefined || props.name === null) {
    errors.push({
      path: 'name',
      message: 'Required property "name" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "name" property to your resource definition'
    });
  }

  // Validate required property: properties
  if (props.properties === undefined || props.properties === null) {
    errors.push({
      path: 'properties',
      message: 'Required property "properties" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "properties" property to your resource definition'
    });
  }

  return {
    valid: errors.length === 0,
    errors
  };
}

/**
 * Validate Microsoft.ServiceBus/namespaces/AuthorizationRules properties.
 *
 * @param props - Resource properties to validate
 * @returns Validation result
 */
export function validateNamespacesAuthorizationRules(props: any): ValidationResult {
  const errors: ValidationError[] = [];

  // Validate required property: name
  if (props.name === undefined || props.name === null) {
    errors.push({
      path: 'name',
      message: 'Required property "name" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "name" property to your resource definition'
    });
  }

  // Validate required property: properties
  if (props.properties === undefined || props.properties === null) {
    errors.push({
      path: 'properties',
      message: 'Required property "properties" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "properties" property to your resource definition'
    });
  }

  // Validate constraints on: name
  if (props.name !== undefined && props.name !== null) {
    if (typeof props.name === 'string') {
      if (props.name.length < 1) {
        errors.push({
          path: 'name',
          message: 'Property "name" must be at least 1 characters',
          code: 'STRING_TOO_SHORT',
          fix: 'Provide a longer value for "name"'
        });
      }
      if (props.name.length > 50) {
        errors.push({
          path: 'name',
          message: 'Property "name" must be at most 50 characters',
          code: 'STRING_TOO_LONG',
          fix: 'Shorten the value of "name" to 50 characters or less'
        });
      }
    }
  }

  return {
    valid: errors.length === 0,
    errors
  };
}

/**
 * Validate Microsoft.ServiceBus/namespaces/disasterRecoveryConfigs properties.
 *
 * @param props - Resource properties to validate
 * @returns Validation result
 */
export function validateNamespacesDisasterRecoveryConfigs(props: any): ValidationResult {
  const errors: ValidationError[] = [];

  // Validate required property: name
  if (props.name === undefined || props.name === null) {
    errors.push({
      path: 'name',
      message: 'Required property "name" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "name" property to your resource definition'
    });
  }

  // Validate required property: properties
  if (props.properties === undefined || props.properties === null) {
    errors.push({
      path: 'properties',
      message: 'Required property "properties" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "properties" property to your resource definition'
    });
  }

  // Validate constraints on: name
  if (props.name !== undefined && props.name !== null) {
    if (typeof props.name === 'string') {
      if (props.name.length < 1) {
        errors.push({
          path: 'name',
          message: 'Property "name" must be at least 1 characters',
          code: 'STRING_TOO_SHORT',
          fix: 'Provide a longer value for "name"'
        });
      }
      if (props.name.length > 50) {
        errors.push({
          path: 'name',
          message: 'Property "name" must be at most 50 characters',
          code: 'STRING_TOO_LONG',
          fix: 'Shorten the value of "name" to 50 characters or less'
        });
      }
    }
  }

  return {
    valid: errors.length === 0,
    errors
  };
}

/**
 * Validate Microsoft.ServiceBus/namespaces/migrationConfigurations properties.
 *
 * @param props - Resource properties to validate
 * @returns Validation result
 */
export function validateNamespacesMigrationConfigurations(props: any): ValidationResult {
  const errors: ValidationError[] = [];

  // Validate required property: name
  if (props.name === undefined || props.name === null) {
    errors.push({
      path: 'name',
      message: 'Required property "name" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "name" property to your resource definition'
    });
  }

  // Validate required property: properties
  if (props.properties === undefined || props.properties === null) {
    errors.push({
      path: 'properties',
      message: 'Required property "properties" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "properties" property to your resource definition'
    });
  }

  return {
    valid: errors.length === 0,
    errors
  };
}

/**
 * Validate Microsoft.ServiceBus/namespaces/networkRuleSets properties.
 *
 * @param props - Resource properties to validate
 * @returns Validation result
 */
export function validateNamespacesNetworkRuleSets(props: any): ValidationResult {
  const errors: ValidationError[] = [];

  // Validate required property: name
  if (props.name === undefined || props.name === null) {
    errors.push({
      path: 'name',
      message: 'Required property "name" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "name" property to your resource definition'
    });
  }

  // Validate required property: properties
  if (props.properties === undefined || props.properties === null) {
    errors.push({
      path: 'properties',
      message: 'Required property "properties" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "properties" property to your resource definition'
    });
  }

  return {
    valid: errors.length === 0,
    errors
  };
}

/**
 * Validate Microsoft.ServiceBus/namespaces/privateEndpointConnections properties.
 *
 * @param props - Resource properties to validate
 * @returns Validation result
 */
export function validateNamespacesPrivateEndpointConnections(props: any): ValidationResult {
  const errors: ValidationError[] = [];

  // Validate required property: name
  if (props.name === undefined || props.name === null) {
    errors.push({
      path: 'name',
      message: 'Required property "name" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "name" property to your resource definition'
    });
  }

  // Validate required property: properties
  if (props.properties === undefined || props.properties === null) {
    errors.push({
      path: 'properties',
      message: 'Required property "properties" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "properties" property to your resource definition'
    });
  }

  return {
    valid: errors.length === 0,
    errors
  };
}

/**
 * Validate Microsoft.ServiceBus/namespaces/queues properties.
 *
 * @param props - Resource properties to validate
 * @returns Validation result
 */
export function validateNamespacesQueues(props: any): ValidationResult {
  const errors: ValidationError[] = [];

  // Validate required property: name
  if (props.name === undefined || props.name === null) {
    errors.push({
      path: 'name',
      message: 'Required property "name" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "name" property to your resource definition'
    });
  }

  // Validate required property: properties
  if (props.properties === undefined || props.properties === null) {
    errors.push({
      path: 'properties',
      message: 'Required property "properties" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "properties" property to your resource definition'
    });
  }

  // Validate constraints on: name
  if (props.name !== undefined && props.name !== null) {
    if (typeof props.name === 'string') {
      if (props.name.length < 1) {
        errors.push({
          path: 'name',
          message: 'Property "name" must be at least 1 characters',
          code: 'STRING_TOO_SHORT',
          fix: 'Provide a longer value for "name"'
        });
      }
    }
  }

  return {
    valid: errors.length === 0,
    errors
  };
}

/**
 * Validate Microsoft.ServiceBus/namespaces/queues/authorizationRules properties.
 *
 * @param props - Resource properties to validate
 * @returns Validation result
 */
export function validateNamespacesQueuesAuthorizationRules(props: any): ValidationResult {
  const errors: ValidationError[] = [];

  // Validate required property: name
  if (props.name === undefined || props.name === null) {
    errors.push({
      path: 'name',
      message: 'Required property "name" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "name" property to your resource definition'
    });
  }

  // Validate required property: properties
  if (props.properties === undefined || props.properties === null) {
    errors.push({
      path: 'properties',
      message: 'Required property "properties" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "properties" property to your resource definition'
    });
  }

  // Validate constraints on: name
  if (props.name !== undefined && props.name !== null) {
    if (typeof props.name === 'string') {
      if (props.name.length < 1) {
        errors.push({
          path: 'name',
          message: 'Property "name" must be at least 1 characters',
          code: 'STRING_TOO_SHORT',
          fix: 'Provide a longer value for "name"'
        });
      }
      if (props.name.length > 50) {
        errors.push({
          path: 'name',
          message: 'Property "name" must be at most 50 characters',
          code: 'STRING_TOO_LONG',
          fix: 'Shorten the value of "name" to 50 characters or less'
        });
      }
    }
  }

  return {
    valid: errors.length === 0,
    errors
  };
}

/**
 * Validate Microsoft.ServiceBus/namespaces/topics properties.
 *
 * @param props - Resource properties to validate
 * @returns Validation result
 */
export function validateNamespacesTopics(props: any): ValidationResult {
  const errors: ValidationError[] = [];

  // Validate required property: name
  if (props.name === undefined || props.name === null) {
    errors.push({
      path: 'name',
      message: 'Required property "name" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "name" property to your resource definition'
    });
  }

  // Validate required property: properties
  if (props.properties === undefined || props.properties === null) {
    errors.push({
      path: 'properties',
      message: 'Required property "properties" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "properties" property to your resource definition'
    });
  }

  // Validate constraints on: name
  if (props.name !== undefined && props.name !== null) {
    if (typeof props.name === 'string') {
      if (props.name.length < 1) {
        errors.push({
          path: 'name',
          message: 'Property "name" must be at least 1 characters',
          code: 'STRING_TOO_SHORT',
          fix: 'Provide a longer value for "name"'
        });
      }
    }
  }

  return {
    valid: errors.length === 0,
    errors
  };
}

/**
 * Validate Microsoft.ServiceBus/namespaces/topics/authorizationRules properties.
 *
 * @param props - Resource properties to validate
 * @returns Validation result
 */
export function validateNamespacesTopicsAuthorizationRules(props: any): ValidationResult {
  const errors: ValidationError[] = [];

  // Validate required property: name
  if (props.name === undefined || props.name === null) {
    errors.push({
      path: 'name',
      message: 'Required property "name" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "name" property to your resource definition'
    });
  }

  // Validate required property: properties
  if (props.properties === undefined || props.properties === null) {
    errors.push({
      path: 'properties',
      message: 'Required property "properties" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "properties" property to your resource definition'
    });
  }

  // Validate constraints on: name
  if (props.name !== undefined && props.name !== null) {
    if (typeof props.name === 'string') {
      if (props.name.length < 1) {
        errors.push({
          path: 'name',
          message: 'Property "name" must be at least 1 characters',
          code: 'STRING_TOO_SHORT',
          fix: 'Provide a longer value for "name"'
        });
      }
      if (props.name.length > 50) {
        errors.push({
          path: 'name',
          message: 'Property "name" must be at most 50 characters',
          code: 'STRING_TOO_LONG',
          fix: 'Shorten the value of "name" to 50 characters or less'
        });
      }
    }
  }

  return {
    valid: errors.length === 0,
    errors
  };
}

/**
 * Validate Microsoft.ServiceBus/namespaces/topics/subscriptions properties.
 *
 * @param props - Resource properties to validate
 * @returns Validation result
 */
export function validateNamespacesTopicsSubscriptions(props: any): ValidationResult {
  const errors: ValidationError[] = [];

  // Validate required property: name
  if (props.name === undefined || props.name === null) {
    errors.push({
      path: 'name',
      message: 'Required property "name" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "name" property to your resource definition'
    });
  }

  // Validate required property: properties
  if (props.properties === undefined || props.properties === null) {
    errors.push({
      path: 'properties',
      message: 'Required property "properties" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "properties" property to your resource definition'
    });
  }

  // Validate constraints on: name
  if (props.name !== undefined && props.name !== null) {
    if (typeof props.name === 'string') {
      if (props.name.length < 1) {
        errors.push({
          path: 'name',
          message: 'Property "name" must be at least 1 characters',
          code: 'STRING_TOO_SHORT',
          fix: 'Provide a longer value for "name"'
        });
      }
      if (props.name.length > 50) {
        errors.push({
          path: 'name',
          message: 'Property "name" must be at most 50 characters',
          code: 'STRING_TOO_LONG',
          fix: 'Shorten the value of "name" to 50 characters or less'
        });
      }
    }
  }

  return {
    valid: errors.length === 0,
    errors
  };
}

/**
 * Validate Microsoft.ServiceBus/namespaces/topics/subscriptions/rules properties.
 *
 * @param props - Resource properties to validate
 * @returns Validation result
 */
export function validateNamespacesTopicsSubscriptionsRules(props: any): ValidationResult {
  const errors: ValidationError[] = [];

  // Validate required property: name
  if (props.name === undefined || props.name === null) {
    errors.push({
      path: 'name',
      message: 'Required property "name" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "name" property to your resource definition'
    });
  }

  // Validate required property: properties
  if (props.properties === undefined || props.properties === null) {
    errors.push({
      path: 'properties',
      message: 'Required property "properties" is missing',
      code: 'REQUIRED_PROPERTY_MISSING',
      fix: 'Add the "properties" property to your resource definition'
    });
  }

  // Validate constraints on: name
  if (props.name !== undefined && props.name !== null) {
    if (typeof props.name === 'string') {
      if (props.name.length < 1) {
        errors.push({
          path: 'name',
          message: 'Property "name" must be at least 1 characters',
          code: 'STRING_TOO_SHORT',
          fix: 'Provide a longer value for "name"'
        });
      }
      if (props.name.length > 50) {
        errors.push({
          path: 'name',
          message: 'Property "name" must be at most 50 characters',
          code: 'STRING_TOO_LONG',
          fix: 'Shorten the value of "name" to 50 characters or less'
        });
      }
    }
  }

  return {
    valid: errors.length === 0,
    errors
  };
}
