"use strict";
/**
 * Atakora Data Schema DSL
 *
 * @remarks
 * Type-safe data model definition system using Zod for runtime validation
 * and TypeScript for compile-time type inference.
 *
 * ## Overview
 *
 * The Atakora Data Schema DSL provides a declarative way to define data models with:
 * - **Fields**: Zod-based field definitions with metadata
 * - **Relationships**: hasOne, hasMany, belongsTo, manyToMany, polymorphic
 * - **Authorization**: Declarative rules for CRUD operations
 * - **Indexes**: Database index definitions
 * - **Hooks**: Lifecycle hooks for custom logic
 * - **Computed Fields**: Derived fields calculated on demand
 * - **Validation**: Custom validation beyond type checking
 *
 * ## Example Usage
 *
 * ```typescript
 * import { defineSchema, Fields, allow, hasMany, belongsTo, z } from '@atakora/lib/schema/atakora';
 *
 * const UserSchema = defineSchema('User', {
 *   fields: z.object({
 *     id: Fields.id(),
 *     email: Fields.email().unique(),
 *     name: z.string().min(1).max(100),
 *     role: z.enum(['admin', 'user']).default('user'),
 *     createdAt: Fields.createdAt(),
 *     updatedAt: Fields.updatedAt()
 *   }),
 *
 *   authorization: {
 *     create: allow.authenticated(),
 *     read: allow.public(),
 *     update: allow.owner('id'),
 *     delete: allow.role('admin')
 *   },
 *
 *   relationships: {
 *     posts: hasMany('Post', 'authorId')
 *   },
 *
 *   indexes: {
 *     byEmail: { fields: ['email'], unique: true }
 *   }
 * });
 *
 * // Type inference
 * type User = InferSchemaType<typeof UserSchema>;
 * ```
 *
 * @packageDocumentation
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.z = exports.globalSchemaRegistry = exports.SchemaRegistry = exports.getRelationshipsByType = exports.getRelationship = exports.hasRelationship = exports.extractFieldMetadata = exports.getAutoUpdatedFields = exports.getAutoGeneratedFields = exports.getIndexedFields = exports.getUniqueFields = exports.getPrimaryKeyField = exports.validateSchema = exports.defineSchema = exports.validateAuthorizationRules = exports.toFunctionAuthConfig = exports.evaluateAuthorizationRule = exports.allow = exports.AuthRuleBuilder = exports.validateRelationship = exports.getInverseRelationType = exports.RelationshipTypeGuards = exports.CascadeBuilder = exports.cascade = exports.polymorphic = exports.manyToMany = exports.belongsTo = exports.hasMany = exports.hasOne = exports.hasFieldMetadata = exports.getFieldMetadata = exports.FieldBuilder = exports.Fields = exports.field = void 0;
// ============================================================================
// FIELD TYPES
// ============================================================================
var field_types_1 = require("./field-types");
Object.defineProperty(exports, "field", { enumerable: true, get: function () { return field_types_1.field; } });
Object.defineProperty(exports, "Fields", { enumerable: true, get: function () { return field_types_1.Fields; } });
Object.defineProperty(exports, "FieldBuilder", { enumerable: true, get: function () { return field_types_1.FieldBuilder; } });
Object.defineProperty(exports, "getFieldMetadata", { enumerable: true, get: function () { return field_types_1.getFieldMetadata; } });
Object.defineProperty(exports, "hasFieldMetadata", { enumerable: true, get: function () { return field_types_1.hasFieldMetadata; } });
// ============================================================================
// RELATIONSHIPS
// ============================================================================
var relationships_1 = require("./relationships");
Object.defineProperty(exports, "hasOne", { enumerable: true, get: function () { return relationships_1.hasOne; } });
Object.defineProperty(exports, "hasMany", { enumerable: true, get: function () { return relationships_1.hasMany; } });
Object.defineProperty(exports, "belongsTo", { enumerable: true, get: function () { return relationships_1.belongsTo; } });
Object.defineProperty(exports, "manyToMany", { enumerable: true, get: function () { return relationships_1.manyToMany; } });
Object.defineProperty(exports, "polymorphic", { enumerable: true, get: function () { return relationships_1.polymorphic; } });
Object.defineProperty(exports, "cascade", { enumerable: true, get: function () { return relationships_1.cascade; } });
Object.defineProperty(exports, "CascadeBuilder", { enumerable: true, get: function () { return relationships_1.CascadeBuilder; } });
Object.defineProperty(exports, "RelationshipTypeGuards", { enumerable: true, get: function () { return relationships_1.RelationshipTypeGuards; } });
Object.defineProperty(exports, "getInverseRelationType", { enumerable: true, get: function () { return relationships_1.getInverseRelationType; } });
Object.defineProperty(exports, "validateRelationship", { enumerable: true, get: function () { return relationships_1.validateRelationship; } });
// ============================================================================
// AUTHORIZATION
// ============================================================================
var authorization_1 = require("./authorization");
Object.defineProperty(exports, "AuthRuleBuilder", { enumerable: true, get: function () { return authorization_1.AuthRuleBuilder; } });
Object.defineProperty(exports, "allow", { enumerable: true, get: function () { return authorization_1.allow; } });
Object.defineProperty(exports, "evaluateAuthorizationRule", { enumerable: true, get: function () { return authorization_1.evaluateAuthorizationRule; } });
Object.defineProperty(exports, "toFunctionAuthConfig", { enumerable: true, get: function () { return authorization_1.toFunctionAuthConfig; } });
Object.defineProperty(exports, "validateAuthorizationRules", { enumerable: true, get: function () { return authorization_1.validateAuthorizationRules; } });
// ============================================================================
// SCHEMA DEFINITION
// ============================================================================
var define_schema_1 = require("./define-schema");
Object.defineProperty(exports, "defineSchema", { enumerable: true, get: function () { return define_schema_1.defineSchema; } });
Object.defineProperty(exports, "validateSchema", { enumerable: true, get: function () { return define_schema_1.validateSchema; } });
Object.defineProperty(exports, "getPrimaryKeyField", { enumerable: true, get: function () { return define_schema_1.getPrimaryKeyField; } });
Object.defineProperty(exports, "getUniqueFields", { enumerable: true, get: function () { return define_schema_1.getUniqueFields; } });
Object.defineProperty(exports, "getIndexedFields", { enumerable: true, get: function () { return define_schema_1.getIndexedFields; } });
Object.defineProperty(exports, "getAutoGeneratedFields", { enumerable: true, get: function () { return define_schema_1.getAutoGeneratedFields; } });
Object.defineProperty(exports, "getAutoUpdatedFields", { enumerable: true, get: function () { return define_schema_1.getAutoUpdatedFields; } });
Object.defineProperty(exports, "extractFieldMetadata", { enumerable: true, get: function () { return define_schema_1.extractFieldMetadata; } });
Object.defineProperty(exports, "hasRelationship", { enumerable: true, get: function () { return define_schema_1.hasRelationship; } });
Object.defineProperty(exports, "getRelationship", { enumerable: true, get: function () { return define_schema_1.getRelationship; } });
Object.defineProperty(exports, "getRelationshipsByType", { enumerable: true, get: function () { return define_schema_1.getRelationshipsByType; } });
Object.defineProperty(exports, "SchemaRegistry", { enumerable: true, get: function () { return define_schema_1.SchemaRegistry; } });
Object.defineProperty(exports, "globalSchemaRegistry", { enumerable: true, get: function () { return define_schema_1.globalSchemaRegistry; } });
// ============================================================================
// RE-EXPORT ZOD FOR CONVENIENCE
// ============================================================================
var zod_1 = require("zod");
Object.defineProperty(exports, "z", { enumerable: true, get: function () { return zod_1.z; } });
