/**
 * RFC 7807 Problem Details Error Handling
 *
 * Provides factory methods and types for creating RFC 7807 compliant error responses.
 * Supports standard HTTP error codes and custom problem details with validation errors,
 * trace IDs, and localization support.
 *
 * @see ADR-015 REST Advanced Features - Section 8: Error Handling
 * @see https://tools.ietf.org/html/rfc7807
 */
/**
 * RFC 7807 Problem Details interface
 *
 * Represents a machine-readable format for specifying errors in HTTP API responses.
 * All properties except type, title, and status are optional and can be extended
 * with additional members.
 *
 * @example
 * ```typescript
 * const problem: ProblemDetails = {
 *   type: 'https://example.com/errors/validation-failed',
 *   title: 'Validation Failed',
 *   status: 422,
 *   detail: 'The request body contains invalid data',
 *   instance: '/api/users',
 *   traceId: 'abc123',
 *   errors: [
 *     { field: 'email', message: 'Invalid email format' }
 *   ]
 * };
 * ```
 */
export interface ProblemDetails {
    /**
     * A URI reference that identifies the problem type
     *
     * When dereferenced, it SHOULD provide human-readable documentation.
     * Defaults to 'about:blank' when not specified.
     */
    readonly type: string;
    /**
     * A short, human-readable summary of the problem type
     *
     * It SHOULD NOT change from occurrence to occurrence of the problem.
     */
    readonly title: string;
    /**
     * The HTTP status code generated by the origin server
     */
    readonly status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem
     */
    readonly detail?: string;
    /**
     * A URI reference that identifies the specific occurrence of the problem
     *
     * It may or may not yield further information if dereferenced.
     */
    readonly instance?: string;
    /**
     * Trace ID for distributed tracing and correlation
     *
     * Used to correlate this error with logs and traces across services.
     */
    readonly traceId?: string;
    /**
     * Detailed validation errors
     *
     * Used when the problem is related to input validation failures.
     */
    readonly errors?: readonly ValidationError[];
    /**
     * Extension members
     *
     * Problem details objects MAY have additional members.
     */
    readonly [key: string]: any;
}
/**
 * Validation error detail
 *
 * Represents a single validation error with field-level information.
 *
 * @example
 * ```typescript
 * const error: ValidationError = {
 *   field: 'email',
 *   message: 'Must be a valid email address',
 *   code: 'invalid_format',
 *   value: 'not-an-email'
 * };
 * ```
 */
export interface ValidationError {
    /**
     * The field or property that failed validation
     */
    readonly field: string;
    /**
     * Human-readable validation error message
     */
    readonly message: string;
    /**
     * Machine-readable error code
     */
    readonly code?: string;
    /**
     * The value that failed validation (optional, may be omitted for security)
     */
    readonly value?: any;
    /**
     * JSON pointer to the field in the request body
     *
     * @example '/user/email'
     */
    readonly pointer?: string;
}
/**
 * Factory for creating RFC 7807 compliant Problem Details responses
 *
 * Provides convenient factory methods for common HTTP error scenarios.
 * All methods return immutable ProblemDetails objects.
 *
 * @example
 * ```typescript
 * // Simple bad request
 * const problem = ProblemDetailsFactory.badRequest('Invalid request body');
 *
 * // Validation error with details
 * const validationProblem = ProblemDetailsFactory.unprocessableEntity(
 *   'Validation failed',
 *   [{ field: 'email', message: 'Invalid email format' }]
 * );
 *
 * // Service unavailable with retry-after
 * const unavailable = ProblemDetailsFactory.serviceUnavailable(
 *   'Database maintenance in progress',
 *   3600
 * );
 * ```
 */
export declare class ProblemDetailsFactory {
    /**
     * Create a 400 Bad Request problem
     *
     * Used when the request is malformed or contains invalid syntax.
     *
     * @param detail - Human-readable explanation of what's wrong
     * @param errors - Optional array of validation errors
     * @returns Immutable ProblemDetails object
     *
     * @example
     * ```typescript
     * const problem = ProblemDetailsFactory.badRequest(
     *   'Request body is not valid JSON'
     * );
     * ```
     */
    static badRequest(detail: string, errors?: readonly ValidationError[]): ProblemDetails;
    /**
     * Create a 401 Unauthorized problem
     *
     * Used when authentication is required but not provided or invalid.
     *
     * @param detail - Human-readable explanation
     * @returns Immutable ProblemDetails object
     *
     * @example
     * ```typescript
     * const problem = ProblemDetailsFactory.unauthorized(
     *   'Bearer token is expired'
     * );
     * ```
     */
    static unauthorized(detail: string): ProblemDetails;
    /**
     * Create a 403 Forbidden problem
     *
     * Used when the user is authenticated but doesn't have permission.
     *
     * @param detail - Human-readable explanation
     * @returns Immutable ProblemDetails object
     *
     * @example
     * ```typescript
     * const problem = ProblemDetailsFactory.forbidden(
     *   'You do not have permission to access this resource'
     * );
     * ```
     */
    static forbidden(detail: string): ProblemDetails;
    /**
     * Create a 404 Not Found problem
     *
     * Used when the requested resource does not exist.
     *
     * @param detail - Human-readable explanation
     * @returns Immutable ProblemDetails object
     *
     * @example
     * ```typescript
     * const problem = ProblemDetailsFactory.notFound(
     *   'User with ID "123" not found'
     * );
     * ```
     */
    static notFound(detail: string): ProblemDetails;
    /**
     * Create a 409 Conflict problem
     *
     * Used when the request conflicts with the current state of the resource.
     *
     * @param detail - Human-readable explanation
     * @returns Immutable ProblemDetails object
     *
     * @example
     * ```typescript
     * const problem = ProblemDetailsFactory.conflict(
     *   'User with email "user@example.com" already exists'
     * );
     * ```
     */
    static conflict(detail: string): ProblemDetails;
    /**
     * Create a 422 Unprocessable Entity problem
     *
     * Used when the request is well-formed but contains semantic errors.
     *
     * @param detail - Human-readable explanation
     * @param errors - Array of validation errors
     * @returns Immutable ProblemDetails object
     *
     * @example
     * ```typescript
     * const problem = ProblemDetailsFactory.unprocessableEntity(
     *   'Validation failed for user creation',
     *   [
     *     { field: 'email', message: 'Invalid email format' },
     *     { field: 'age', message: 'Must be at least 18' }
     *   ]
     * );
     * ```
     */
    static unprocessableEntity(detail: string, errors?: readonly ValidationError[]): ProblemDetails;
    /**
     * Create a 429 Too Many Requests problem
     *
     * Used when the client has exceeded rate limits.
     *
     * @param detail - Human-readable explanation
     * @param retryAfter - Number of seconds until the client can retry
     * @returns Immutable ProblemDetails object
     *
     * @example
     * ```typescript
     * const problem = ProblemDetailsFactory.tooManyRequests(
     *   'Rate limit of 100 requests per minute exceeded',
     *   60
     * );
     * ```
     */
    static tooManyRequests(detail: string, retryAfter?: number): ProblemDetails;
    /**
     * Create a 500 Internal Server Error problem
     *
     * Used when an unexpected error occurs on the server.
     *
     * @param detail - Human-readable explanation (avoid exposing sensitive details)
     * @returns Immutable ProblemDetails object
     *
     * @example
     * ```typescript
     * const problem = ProblemDetailsFactory.internalError(
     *   'An unexpected error occurred while processing your request'
     * );
     * ```
     */
    static internalError(detail: string): ProblemDetails;
    /**
     * Create a 502 Bad Gateway problem
     *
     * Used when the gateway or proxy receives an invalid response from upstream.
     *
     * @param detail - Human-readable explanation
     * @returns Immutable ProblemDetails object
     *
     * @example
     * ```typescript
     * const problem = ProblemDetailsFactory.badGateway(
     *   'Upstream service returned invalid response'
     * );
     * ```
     */
    static badGateway(detail: string): ProblemDetails;
    /**
     * Create a 503 Service Unavailable problem
     *
     * Used when the service is temporarily unavailable.
     *
     * @param detail - Human-readable explanation
     * @param retryAfter - Number of seconds until the service may be available
     * @returns Immutable ProblemDetails object
     *
     * @example
     * ```typescript
     * const problem = ProblemDetailsFactory.serviceUnavailable(
     *   'Service is undergoing maintenance',
     *   3600
     * );
     * ```
     */
    static serviceUnavailable(detail: string, retryAfter?: number): ProblemDetails;
    /**
     * Create a 504 Gateway Timeout problem
     *
     * Used when the gateway or proxy times out waiting for upstream response.
     *
     * @param detail - Human-readable explanation
     * @returns Immutable ProblemDetails object
     *
     * @example
     * ```typescript
     * const problem = ProblemDetailsFactory.gatewayTimeout(
     *   'Upstream service did not respond within timeout period'
     * );
     * ```
     */
    static gatewayTimeout(detail: string): ProblemDetails;
    /**
     * Create a custom problem details object
     *
     * Used for creating problem details with custom status codes and types.
     *
     * @param status - HTTP status code
     * @param type - URI reference identifying the problem type
     * @param title - Short, human-readable summary
     * @param detail - Human-readable explanation specific to this occurrence
     * @param extensions - Additional problem details members
     * @returns Immutable ProblemDetails object
     *
     * @example
     * ```typescript
     * const problem = ProblemDetailsFactory.custom(
     *   418,
     *   'https://example.com/errors/teapot',
     *   'I am a teapot',
     *   'The requested entity body is short and stout',
     *   { spout: true, handle: true }
     * );
     * ```
     */
    static custom(status: number, type: string, title: string, detail: string, extensions?: Record<string, any>): ProblemDetails;
    /**
     * Add trace ID to a problem details object
     *
     * Creates a new problem details object with the trace ID added.
     *
     * @param problem - Original problem details
     * @param traceId - Trace/correlation ID
     * @returns New immutable ProblemDetails object with trace ID
     *
     * @example
     * ```typescript
     * const problem = ProblemDetailsFactory.notFound('Resource not found');
     * const withTrace = ProblemDetailsFactory.withTraceId(problem, 'abc-123-def');
     * ```
     */
    static withTraceId(problem: ProblemDetails, traceId: string): ProblemDetails;
    /**
     * Add instance URI to a problem details object
     *
     * Creates a new problem details object with the instance URI added.
     *
     * @param problem - Original problem details
     * @param instance - URI reference to the specific occurrence
     * @returns New immutable ProblemDetails object with instance
     *
     * @example
     * ```typescript
     * const problem = ProblemDetailsFactory.notFound('Resource not found');
     * const withInstance = ProblemDetailsFactory.withInstance(
     *   problem,
     *   '/api/users/123'
     * );
     * ```
     */
    static withInstance(problem: ProblemDetails, instance: string): ProblemDetails;
    /**
     * Add extension members to a problem details object
     *
     * Creates a new problem details object with extension members added.
     *
     * @param problem - Original problem details
     * @param extensions - Additional members to add
     * @returns New immutable ProblemDetails object with extensions
     *
     * @example
     * ```typescript
     * const problem = ProblemDetailsFactory.badRequest('Invalid input');
     * const extended = ProblemDetailsFactory.withExtensions(problem, {
     *   requestId: 'req-123',
     *   documentation: 'https://docs.example.com/errors/validation'
     * });
     * ```
     */
    static withExtensions(problem: ProblemDetails, extensions: Record<string, any>): ProblemDetails;
    /**
     * Convert a problem details object to a JSON response body
     *
     * Serializes the problem details to JSON with proper formatting.
     *
     * @param problem - Problem details to serialize
     * @returns JSON string representation
     *
     * @example
     * ```typescript
     * const problem = ProblemDetailsFactory.notFound('Resource not found');
     * const json = ProblemDetailsFactory.toJson(problem);
     * // Returns: '{"type":"https://httpstatuses.io/404",...}'
     * ```
     */
    static toJson(problem: ProblemDetails): string;
    /**
     * Get the appropriate Content-Type header value for problem details
     *
     * Returns 'application/problem+json' as specified by RFC 7807.
     *
     * @returns Content-Type header value
     *
     * @example
     * ```typescript
     * const contentType = ProblemDetailsFactory.contentType();
     * // Returns: 'application/problem+json'
     * ```
     */
    static contentType(): string;
}
/**
 * Helper for validating problem details objects
 *
 * Provides validation utilities to ensure problem details conform to RFC 7807.
 */
export declare class ProblemDetailsValidator {
    /**
     * Validate that a problem details object is valid
     *
     * Checks that required fields are present and have valid values.
     *
     * @param problem - Problem details to validate
     * @returns True if valid, false otherwise
     *
     * @example
     * ```typescript
     * const problem = ProblemDetailsFactory.notFound('Not found');
     * const isValid = ProblemDetailsValidator.isValid(problem);
     * // Returns: true
     * ```
     */
    static isValid(problem: unknown): problem is ProblemDetails;
    /**
     * Validate that a status code is a valid HTTP status code
     *
     * @param status - Status code to validate
     * @returns True if valid, false otherwise
     *
     * @example
     * ```typescript
     * const isValid = ProblemDetailsValidator.isValidStatusCode(404);
     * // Returns: true
     * ```
     */
    static isValidStatusCode(status: number): boolean;
    /**
     * Validate that a URI is a valid problem type URI
     *
     * @param uri - URI to validate
     * @returns True if valid, false otherwise
     *
     * @example
     * ```typescript
     * const isValid = ProblemDetailsValidator.isValidTypeUri(
     *   'https://example.com/errors/not-found'
     * );
     * // Returns: true
     * ```
     */
    static isValidTypeUri(uri: string): boolean;
}
//# sourceMappingURL=problem-details.d.ts.map