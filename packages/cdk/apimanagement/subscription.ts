import { Construct, Resource } from '@atakora/lib';
import { DeploymentScope } from '@atakora/lib';
import type { ArmResource } from '@atakora/lib/src/core/resource';
import type {
  ArmApiManagementSubscriptionProps,
  ApiManagementSubscriptionProps,
  IService,
  IServiceSubscription,
  IServiceProduct,
  IServiceApi,
} from './api-management-types';
import { SubscriptionState } from './api-management-types';

/**
 * L1 construct for API Management Subscription.
 *
 * @remarks
 * Direct mapping to Microsoft.ApiManagement/service/subscriptions ARM resource.
 * This is a child resource of API Management service.
 *
 * **ARM Resource Type**: `Microsoft.ApiManagement/service/subscriptions`
 * **API Version**: `2024-05-01`
 * **Deployment Scope**: ResourceGroup (as child resource)
 *
 * @example
 * ```typescript
 * const subscription = new ArmApiManagementSubscription(apimService, 'AuthRSubscription', {
 *   apiManagementService: apimService,
 *   subscriptionName: 'authr-subscription',
 *   properties: {
 *     displayName: 'AuthR Subscription',
 *     scope: '/products/authr-product',
 *     state: SubscriptionState.ACTIVE
 *   }
 * });
 * ```
 */
export class ArmApiManagementSubscription extends Resource {
  /**
   * ARM resource type.
   */
  public readonly resourceType: string = 'Microsoft.ApiManagement/service/subscriptions';

  /**
   * API version for the resource.
   */
  public readonly apiVersion: string = '2024-05-01';

  /**
   * Deployment scope.
   */
  public readonly scope: DeploymentScope.ResourceGroup = DeploymentScope.ResourceGroup;

  /**
   * Parent API Management service.
   */
  public readonly apiManagementService: IService;

  /**
   * Subscription name.
   */
  public readonly subscriptionName: string;

  /**
   * Resource name (same as subscriptionName).
   */
  public readonly name: string;

  /**
   * Display name.
   */
  public readonly displayName: string;

  /**
   * Scope path.
   */
  public readonly scopePath: string;

  /**
   * Subscription state.
   */
  public readonly state?: SubscriptionState;

  /**
   * Allow tracing.
   */
  public readonly allowTracing?: boolean;

  /**
   * ARM resource ID.
   */
  public readonly resourceId: string;

  /**
   * Subscription ID (alias for resourceId).
   */
  public readonly subscriptionId: string;

  /**
   * Primary key (generated by Azure).
   */
  public readonly primaryKey: string;

  /**
   * Secondary key (generated by Azure).
   */
  public readonly secondaryKey: string;

  constructor(scope: Construct, id: string, props: ArmApiManagementSubscriptionProps) {
    super(scope, id);

    this.validateProps(props);

    this.apiManagementService = props.apiManagementService;
    this.subscriptionName = props.subscriptionName;
    this.name = props.subscriptionName;
    this.displayName = props.properties.displayName;
    this.scopePath = props.properties.scope;
    this.state = props.properties.state;
    this.allowTracing = props.properties.allowTracing;

    this.resourceId = `${this.apiManagementService.apiManagementId}/subscriptions/${this.subscriptionName}`;
    this.subscriptionId = this.resourceId;

    // Keys are generated by Azure upon deployment
    this.primaryKey = `reference('${this.subscriptionId}').primaryKey`;
    this.secondaryKey = `reference('${this.subscriptionId}').secondaryKey`;
  }

  protected validateProps(props: ArmApiManagementSubscriptionProps): void {
    if (!props.subscriptionName || props.subscriptionName.trim() === '') {
      throw new Error('Subscription name cannot be empty');
    }

    if (!props.properties.displayName || props.properties.displayName.trim() === '') {
      throw new Error('Display name cannot be empty');
    }

    if (!props.properties.scope || props.properties.scope.trim() === '') {
      throw new Error('Scope cannot be empty');
    }
  }

  public toArmTemplate(): ArmResource {
    const properties: any = {
      displayName: this.displayName,
      scope: this.scopePath,
    };

    if (this.state) {
      properties.state = this.state;
    }

    if (this.allowTracing !== undefined) {
      properties.allowTracing = this.allowTracing;
    }

    return {
      type: this.resourceType,
      apiVersion: this.apiVersion,
      name: `${this.apiManagementService.serviceName}/${this.subscriptionName}`,
      properties,
      dependsOn: [this.apiManagementService.apiManagementId],
    } as ArmResource;
  }
}

/**
 * L2 construct for API Management Subscription.
 *
 * @remarks
 * Intent-based API with sensible defaults.
 *
 * @example
 * ```typescript
 * const subscription = new ApiManagementSubscription(apimService, 'AuthRSubscription', {
 *   apiManagementService: apimService,
 *   displayName: 'AuthR Subscription',
 *   scopeProduct: product
 * });
 * ```
 */
export class ApiManagementSubscription extends Construct implements IServiceSubscription {
  private readonly armSubscription: ArmApiManagementSubscription;

  public readonly subscriptionName: string;
  public readonly subscriptionId: string;
  public readonly primaryKey: string;
  public readonly secondaryKey: string;

  constructor(scope: Construct, id: string, props: ApiManagementSubscriptionProps) {
    super(scope, id);

    // Validate that either scopeProduct or scopeApi is provided
    if (!props.scopeProduct && !props.scopeApi) {
      throw new Error('Either scopeProduct or scopeApi must be provided');
    }

    this.subscriptionName = props.subscriptionName ?? this.sanitizeSubscriptionName(id);

    // Build scope path from product or API reference
    const scopePath = this.buildScopePath(props.scopeProduct, props.scopeApi);

    this.armSubscription = new ArmApiManagementSubscription(scope, `${id}-Resource`, {
      apiManagementService: props.apiManagementService,
      subscriptionName: this.subscriptionName,
      properties: {
        displayName: props.displayName,
        scope: scopePath,
        state: props.state ?? ('active' as SubscriptionState),
        allowTracing: props.allowTracing,
      },
    });

    this.subscriptionId = this.armSubscription.subscriptionId;
    this.primaryKey = this.armSubscription.primaryKey;
    this.secondaryKey = this.armSubscription.secondaryKey;
  }

  private sanitizeSubscriptionName(id: string): string {
    return id.toLowerCase().replace(/[^a-z0-9-]/g, '-');
  }

  private buildScopePath(
    scopeProduct?: IServiceProduct,
    scopeApi?: IServiceApi
  ): string {
    if (scopeProduct) {
      return `/products/${scopeProduct.productName}`;
    } else if (scopeApi) {
      return `/apis/${scopeApi.apiName}`;
    } else {
      throw new Error('Either scopeProduct or scopeApi must be provided');
    }
  }
}
